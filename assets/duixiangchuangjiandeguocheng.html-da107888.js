import{_ as o,o as t,c as e,b as n}from"./app-bcc3a327.js";const r={},a=n('<h4 id="_1、对象创建的过程" tabindex="-1"><a class="header-anchor" href="#_1、对象创建的过程" aria-hidden="true">#</a> 1、对象创建的过程</h4><ol><li><p>类加载检查</p><blockquote><p>首先去检查这个指令的参数是否能在常量池中定位到这个类的符号引用，并且检查这个符号引用代表的类是否已被加载过、解析和初始化过。如果没有，那必须先执行相应的类加载过程，</p></blockquote></li><li><p>分配内存</p><blockquote><p>在<strong>类加载检查</strong>通过后，虚拟机将为新生对象<strong>分配内存</strong>。对象所需的内存大小在类加载完成后便可确定，为对象分配空间的任务等同于把一块确定大小的内存从Java堆中划分出来。分配方式有“<strong>指针碰撞</strong>”和“<strong>空闲列表</strong>”两种，<strong>选择哪种分配方式由Java堆是否规整决定，而Java堆是否规整又由采用的垃圾回收器是否带有压缩整理功能决定</strong></p></blockquote><p><strong>内存分配的两种方式：</strong></p><p>选择以上两种方式中的哪一种，取决于 Java 堆内存是否规整。而 Java 堆内存是否规整，取决于 GC 收集器的算法是&quot;标记-清除&quot;，还是&quot;标记-整理&quot;（也称作&quot;标记-压缩&quot;），值得注意的是，复制算法内存也是规整的</p><p><strong>内存分配并发问题</strong></p><p>在创建对象的时候有一个很重要的问题，就是线程安全，因为在实际开发过程中，创建对象是很频繁的事情，作为虚拟机来说，必须要保证线程是安全的，通常来说虚拟机采用两种方式保证线程安全：</p><ul><li><strong>CAS+失败重试</strong>：CAS是乐观锁的一种实现方式。所谓乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为失败就重试，知道成功为止。<strong>虚拟机采用CAS配上失败重试的方式保证更新操作的原子性。</strong></li><li><strong>TLAB</strong>：为每一个线程预先在Eden区分配一块儿内存，JVM在给线程中的对象分配内存时，首先在TLAB分配，当对象大于TLAB中的剩余内存或TLAB的内存已用尽时，再采用上述的CAS进行内存分配</li></ul></li><li><p>初始化零值</p><blockquote><p>内存分配完成后，虚拟机需要将分配到的内存空间都初始化为零值（不包括对象头），这一步操作保证了对象的实例字段在Java代码中可以不赋初始值就可以直接使用，程序能访问到这些字段的数据类型所对应的零值。</p></blockquote></li><li><p>设置对象头</p><blockquote><p>初始化零值完成之后，<strong>虚拟机要对对象进行必要的设置</strong>。例如这个对象是那个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的GC分代年龄等信息。<strong>这些信息存放在信息头中</strong>。另外，根据虚拟机当前运行状态的不同，如是否启用偏向锁等，对象头都会有不同的设置方式。</p></blockquote></li><li><p>执行初始化方法</p><blockquote><p>在上面的工作都完成之后，从虚拟机视角来看，一个新的对象已经产生了，但从Java程序的视角来看，对象创建才刚开始， <code>&lt;init&gt;</code> 方法还没有执行，所有的字段都还为零。所以一般来说，执行new指令之后会接着执行 <code>&lt;init&gt;</code>方法，把对象按照程序员的意愿进行初始化，这样一个真正的对象才算完全产生出来。</p></blockquote></li></ol><hr><h4 id="_2、对象的内存布局" tabindex="-1"><a class="header-anchor" href="#_2、对象的内存布局" aria-hidden="true">#</a> 2、对象的内存布局</h4><p>在 Hotspot 虚拟机中，对象在内存中的布局可以分为3块区域：<strong>对象头、实例数据和对齐补充。</strong></p><p><strong>对象头包括两部分信息，第一部分用于存储对象自身的运行时数据</strong>（哈希码、GC分代年龄、锁状态标志等等），**另一部分是类型指针，**即对象执行它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。</p><p>**实例数据部分是对象真正存储的有效信息，**也是在程序中所定义的各种类型的字段内容。</p><p>**对齐填充部分不是必然存在的，也没有什么特别的含义，仅仅起占位作用。**因为 Hotspot虚拟机的自动内存管理系统要求对象起始地址必须是8字节的整倍数，换句话说对象的大小必须是8字节的整数倍。而对象头部分正好是8字节的倍数（1倍或2倍），因为，当对象实例数据部分没有对齐时，就需要对齐补充来补全</p><hr><h4 id="_3、对象的访问定位" tabindex="-1"><a class="header-anchor" href="#_3、对象的访问定位" aria-hidden="true">#</a> 3、对象的访问定位</h4><p>建立对象就是为了使用对象，我们的Java程序通过栈上的 reference 数据来操作堆上的的具体对象。 对象的访问方式由虚拟机的实现而定， 目前主流的访问方式有 <strong>使用句柄和直接指针</strong> 两种：</p><ul><li>句柄： 如果使用句柄的话，那么 Java堆中将会划分出来一块内存来作为句柄池， reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自的具体地址信息；</li><li>直接指针：如果使用直接指针访问，那么 Java堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，而 reference 中存储的直接就是对象的地址</li></ul><p>比较：</p><blockquote><p>这两种对象访问方式各有优势。使用句柄来访问的最大好处就是 reference中存储的是稳定的句柄地址，在对象移动时只会改变句柄中的实例数据指针，而reference 本身不需要修改。使用直接指针访问方式最大的好处就是速度，它节省了一次指针定位的时间开销</p></blockquote>',14),s=[a];function l(c,i){return t(),e("div",null,s)}const g=o(r,[["render",l],["__file","duixiangchuangjiandeguocheng.html.vue"]]);export{g as default};
