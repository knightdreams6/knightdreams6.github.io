import{_ as e,o,c as r,b as l}from"./app-bd582996.js";const i={},t=l("<blockquote><p>在使用order by时，经常出现<strong>Using filesort</strong>，</p><p>因此对于此类sql语句需尽力优化，使其尽量使用<strong>Using index</strong>。</p></blockquote><p><strong>总结：</strong></p><ol><li><p>MySQL支持两种方式的排序filesort和index，Using index是指MySQL扫描索引本身完成排序。index效率高，filesort效率低。</p></li><li><p>order by 满足两种情况会使用 Using index</p><ul><li>order by语句使用索引最左前列。</li><li>使用where子句与order by子句条件列组合满足索引最左前列。</li></ul></li><li><p>尽量在索引列上完成排序，遵循索引建立（索引创建的顺序）时的最佳左前缀法则。</p></li><li><p>如果order by的条件不在索引列上，就会产生Using filesort。</p><blockquote><p>filesort有两种排序算法：双路排序和单路排序。</p></blockquote></li><li><p>提升order by速度的方式：</p><ul><li>在使用order by时，不要用select *，只查询所需的字段。因为当查询字段过多时，会导致sort_buffer不够，从而使用多路排序或进行多次I/O操作</li><li>尝试提高sort_buffer_size</li><li>尝试提高max_length_for_sort_data</li></ul></li><li><p>group by与order by很类似，其实质是先排序后分组，遵照索引创建顺序的最佳左前缀法则。当无法使用索引列的时候，也要对sort_buffer_size和max_length_for_sort_data参数进行调整。注意where高于having，能写在where中的限定条件就不要去having限定了</p></li></ol>",3),s=[t];function n(_,p){return o(),r("div",null,s)}const c=e(i,[["render",n],["__file","mysql(si)orderByyouhua.html.vue"]]);export{c as default};
