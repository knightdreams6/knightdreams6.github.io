import{_ as o,r as i,o as r,c,d as n,e,a as s,b as a}from"./app-bd582996.js";const p={},l=a(`<p>官方文档：https://docs.spring.io/spring-security/reference/</p><h3 id="体系结构" tabindex="-1"><a class="header-anchor" href="#体系结构" aria-hidden="true">#</a> 体系结构</h3><h4 id="过滤器" tabindex="-1"><a class="header-anchor" href="#过滤器" aria-hidden="true">#</a> 过滤器</h4><p>Spring Security 的 Servlet 支持是基于 Servlet Filters的。</p><p>客户端向应用程序发送请求，容器创建一个 FilterChain，其中包含根据请求 URI 的路径处理 HttpServletRequest 的 Filters 和 Servlet。在 Spring MVC 应用程序中，Servlet 是 DispatcherServlet 的一个实例。 一个 Servlet 最多可以处理一个 HttpServletRequest 和 HttpServletResponse。 但是，可以使用多个过滤器来：</p><ul><li>防止下游过滤器或 Servlet 被调用。在这种情况下，过滤器通常会写入HttpServletResponse。</li><li>修改下游Filters和Servlet使用的HttpServletRequest或HttpServletResponse</li></ul><p><code>FilterChain</code> 使用示例</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// do something before the rest of the application</span>
    chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// invoke the rest of the application</span>
    <span class="token comment">// do something after the rest of the application</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>由于过滤器仅影响下游过滤器和 Servlet，因此调用每个过滤器的顺序非常重要</p></blockquote><h4 id="委托过滤器代理" tabindex="-1"><a class="header-anchor" href="#委托过滤器代理" aria-hidden="true">#</a> 委托过滤器代理</h4><p>Spring提供了一个名为 <code>DelegatingFilterProxy</code> 的过滤器实现，它允许在 Servlet 容器的生命周期和 Spring 的 <code>ApplicationContext</code> 之间进行桥接。Servlet 容器允许使用自己的标准注册过滤器，但它不知道Spring定义的bean。<code>DelegatingFilterProxy</code> 可以通过标准 Servlet 容器机制注册，但将所有工作委托给实现 Filter 的 Spring Bean。</p><p><code>DelegatingFilterProxy</code> 伪代码示例</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) {
	// 延迟获取已注册为 Spring Bean 的过滤器
	Filter delegate = getFilterBean(someBeanName);
	// 将工作委托给 Spring Bean
	delegate.doFilter(request, response);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>DelegatingFilterProxy</code> 的另一个好处是它允许延迟查找 Filter bean 实例。这很重要，因为容器需要再启动之前注册 Filter实例，但是，Spring通常使用 <code>ContextLoaderListener</code> 来加载 <code>Spring Bean</code> ，这需要注册过滤器实例之后才完成</p><h4 id="过滤链代理" tabindex="-1"><a class="header-anchor" href="#过滤链代理" aria-hidden="true">#</a> 过滤链代理</h4><p>Spring Security 的 Servlet 支持包含在 FilterChainProxy 中。FilterChainProxy 是 Spring Security 提供的一个特殊的 Filter，它允许通过 SecurityFilterChain 委托给许多 Filter 实例。 由于 FilterChainProxy 是一个 Bean，它通常被包装在一个 DelegatingFilterProxy 中。</p><h4 id="security过滤链" tabindex="-1"><a class="header-anchor" href="#security过滤链" aria-hidden="true">#</a> Security过滤链</h4><p>FilterChainProxy 使用 SecurityFilterChain 来确定应为此请求调用哪些 Spring 安全过滤器。</p><p>SecurityFilterChain 中的安全过滤器通常是 Bean，但他们注册到 FilterChainProxy 而不是 DelegatingFilterProxy。因为FilterChainProxy 比直接向 Servlet 容器或 DelegatingFilterProxy 注册提供了许多优势。首先，它为 Spring Security 的所有 Servlet支持提供了一个起点。因此如果尝试对 Spring Security进行debug，那么FilterChainProxy中添加调试点是一个好的选择。</p><p>其次，由于 FilterChainProxy是 Spring Security 使用的核心，它可以执行不被视为可选的任务，例如，它清除 SecurityContext 以避免内存泄漏。 它还应用 Spring Security 的 HttpFirewall 来保护应用程序免受某些类型的攻击。</p><p>此外，它在确定合适应该调用 SecurityFilterChain 方面提供了更大的灵活性。在Servlet容器中，仅根据URL 调用过滤器。但是，在FilterChainProxy 可以利用 RequestMatcher 接口根据 HttpServletRequest 中的任何内容确定是否继续执行。</p><p>实际上，FilterChainProxy 可用于确定应使用哪个 SecurityFilterChain。这允许为应用程序的不同部分提供完全独立的配置。</p><h4 id="security过滤器" tabindex="-1"><a class="header-anchor" href="#security过滤器" aria-hidden="true">#</a> Security过滤器</h4><p>安全过滤器通过 SecurityFilterChain API 插入到 FilterChainProxy中。过滤器的顺序很重要</p><p>以下是Spring Security Filter 排序的完整列表：</p><h6 id="_1、channelprocessingfilter" tabindex="-1"><a class="header-anchor" href="#_1、channelprocessingfilter" aria-hidden="true">#</a> 1、ChannelProcessingFilter</h6><p>确定当前请求是否符合配置的协议。用来过滤请求必须用https协议、http协议、或随便用哪个协议都行.</p><h6 id="_2、webasyncmanagerintegrationfilter" tabindex="-1"><a class="header-anchor" href="#_2、webasyncmanagerintegrationfilter" aria-hidden="true">#</a> 2、WebAsyncManagerIntegrationFilter</h6><p>使WebAsyncTask可以从SecurityContextHolder获取身份认证信息</p><h6 id="_3、securitycontextpersistencefilter" tabindex="-1"><a class="header-anchor" href="#_3、securitycontextpersistencefilter" aria-hidden="true">#</a> 3、SecurityContextPersistenceFilter</h6><ul><li>如果存在共享对象<code>SecurityContextRepository</code>，则使用它作为安全上下文存储库，否则创建一个实现类型为<code>HttpSessionSecurityContextRepository</code>的存储库并使用</li><li>如果配置器<code>SessionManagementConfigurer</code>中配置的会话创建策略<code>SessionCreationPolicy</code>为<code>ALWAYS</code>的话,则将过滤器属性<code>forceEagerSessionCreation</code>设置为<code>true</code></li></ul><h6 id="_4、headerwriterfilter" tabindex="-1"><a class="header-anchor" href="#_4、headerwriterfilter" aria-hidden="true">#</a> 4、HeaderWriterFilter</h6><p>写入安全相关的响应头 [防止漏洞过滤 http headers]</p><h6 id="_5、corsfilter" tabindex="-1"><a class="header-anchor" href="#_5、corsfilter" aria-hidden="true">#</a> 5、CorsFilter</h6><p>处理跨域请求</p><h6 id="_6、csrffilter" tabindex="-1"><a class="header-anchor" href="#_6、csrffilter" aria-hidden="true">#</a> 6、CsrfFilter</h6><p>使用同步器令牌模式过滤 CSRF 攻击。通常， <code>CsrfTokenRepository</code>实现选择将CsrfToken存储在HttpSession ， <code>HttpSessionCsrfTokenRepository</code>由<code>LazyCsrfTokenRepository</code>包装。 这比将令牌存储在可由客户端应用程序修改的 cookie 中更受欢迎。</p><h6 id="_7、logoutfilter" tabindex="-1"><a class="header-anchor" href="#_7、logoutfilter" aria-hidden="true">#</a> 7、LogoutFilter</h6><p>轮询一系列LogoutHandler 。 处理程序应按需要的顺序指定。 通常， 需要调用注销处理程序TokenBasedRememberMeServices和SecurityContextLogoutHandler</p><p>注销后，将重定向到由配置的LogoutSuccessHandler或logoutSuccessUrl确定的 URL，具体取决于使用的构造函数。</p><h6 id="_8、oauth2authorizationrequestredirectfilter" tabindex="-1"><a class="header-anchor" href="#_8、oauth2authorizationrequestredirectfilter" aria-hidden="true">#</a> 8、OAuth2AuthorizationRequestRedirectFilter</h6><p>拦截<code>/oauth2/authorization</code>请求并构造<code>OAuth2AuthorizationRequest</code>，然后重定向到<code>authorizationRequestUri</code>进行请求授权。</p><h6 id="_9、saml2webssoauthenticationrequestfilter" tabindex="-1"><a class="header-anchor" href="#_9、saml2webssoauthenticationrequestfilter" aria-hidden="true">#</a> 9、Saml2WebSsoAuthenticationRequestFilter</h6><p>这个需要用到 <code>Spring Security SAML</code> 模块，这是一个基于 <code>SMAL</code> 的 <code>SSO</code> 单点登录请求认证过滤器。</p><h6 id="_10、x509authenticationfilter" tabindex="-1"><a class="header-anchor" href="#_10、x509authenticationfilter" aria-hidden="true">#</a> 10、X509AuthenticationFilter</h6><p><code>X509</code> 认证过滤器。可以通过 <code>HttpSecurity#X509()</code> 来启用和配置相关功能。</p><h6 id="_11、abstractpreauthenticatedprocessingfilter" tabindex="-1"><a class="header-anchor" href="#_11、abstractpreauthenticatedprocessingfilter" aria-hidden="true">#</a> 11、AbstractPreAuthenticatedProcessingFilter</h6><p>AbstractPreAuthenticatedProcessingFilter 处理处理经过预先认证的身份验证请求的过滤器的基类，其中认证主体已经由外部系统进行了身份验证。 目的只是从传入请求中提取主体上的必要信息，而不是对它们进行身份验证。</p><p>可以继承该类进行具体实现并通过 HttpSecurity#addFilter 方法来添加个性化的AbstractPreAuthenticatedProcessingFilter 。</p><h6 id="_12、casauthenticationfilter" tabindex="-1"><a class="header-anchor" href="#_12、casauthenticationfilter" aria-hidden="true">#</a> 12、CasAuthenticationFilter</h6><p><code>CAS</code> 单点登录认证过滤器 。依赖 Spring Security CAS 模块</p><h6 id="_13、oauth2loginauthenticationfilter" tabindex="-1"><a class="header-anchor" href="#_13、oauth2loginauthenticationfilter" aria-hidden="true">#</a> 13、OAuth2LoginAuthenticationFilter</h6><p>用于 OAuth 2.0 登录的AbstractAuthenticationProcessingFilter的实现。</p><p>此身份验证Filter处理授权代码授权流的 OAuth 2.0 授权响应，并将OAuth2LoginAuthenticationToken委托给AuthenticationManager以登录最终用户。</p><p>OAuth 2.0 授权响应处理如下：</p><ul><li>假设最终用户（资源所有者）已授予对客户端的访问权限，授权服务器会将code和state参数附加到redirect_uri （在授权请求中提供）并将最终用户的用户代理重定向回此Filter （客户端）。 然后，此Filter将使用收到的code创建一个OAuth2LoginAuthenticationToken并将其委托给AuthenticationManager进行身份验证。</li><li>身份验证成功后，将创建OAuth2AuthenticationToken （代表最终用户Principal ）并使用OAuth2AuthorizedClientRepository将其关联到Authorized Client 。</li><li>最后返回OAuth2AuthenticationToken并最终存放在SecurityContextRepository ，完成认证处理。</li></ul><h6 id="_14、saml2webssoauthenticationfilter" tabindex="-1"><a class="header-anchor" href="#_14、saml2webssoauthenticationfilter" aria-hidden="true">#</a> 14、Saml2WebSsoAuthenticationFilter</h6><blockquote><p>这个需要用到 <code>Spring Security SAML</code> 模块，这是一个基于 <code>SMAL</code> 的 <code>SSO</code> 单点登录认证过滤器</p></blockquote>`,58),u={id:"_15、usernamepasswordauthenticationfilter",tabindex:"-1"},d=n("a",{class:"header-anchor",href:"#_15、usernamepasswordauthenticationfilter","aria-hidden":"true"},"#",-1),h={href:"https://docs.spring.io/spring-security/reference/servlet/authentication/passwords/form.html#servlet-authentication-usernamepasswordauthenticationfilter",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"UsernamePasswordAuthenticationFilter",-1),v=n("code",null,"UsernamePasswordAuthenticationFilter",-1),m=n("code",null,"UsernamePasswordAuthenticationToken",-1),g={href:"https://docs.spring.io/spring-security/reference/servlet/authentication/architecture.html#servlet-authentication-authentication",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"Authentication",-1),f=n("code",null,"HttpServletRequest",-1),b=n("code",null,"UsernamePasswordAuthenticationToken",-1),S=n("code",null,"AuthenticationManager",-1),y=n("code",null,"AuthenticationManager",-1),x={href:"https://docs.spring.io/spring-security/reference/servlet/authentication/passwords/index.html#servlet-authentication-unpwd-storage",target:"_blank",rel:"noopener noreferrer"},w=n("p",null,"如果身份验证失败",-1),C={href:"https://docs.spring.io/spring-security/reference/servlet/authentication/architecture.html#servlet-authentication-securitycontextholder",target:"_blank",rel:"noopener noreferrer"},F=n("li",null,[n("code",null,"RememberMeServices.loginFail"),e("被调用。如果记住我没有配置，这是一个空操作。")],-1),A=n("li",null,[n("code",null,"AuthenticationFailureHandler"),e(" 被调用。")],-1),T=n("p",null,"如果身份验证成功",-1),R=n("li",null,[n("code",null,"SessionAuthenticationStrategy"),e(" 收到新登录通知。")],-1),H={href:"https://docs.spring.io/spring-security/reference/servlet/authentication/architecture.html#servlet-authentication-authentication",target:"_blank",rel:"noopener noreferrer"},P={href:"https://docs.spring.io/spring-security/reference/servlet/authentication/architecture.html#servlet-authentication-securitycontextholder",target:"_blank",rel:"noopener noreferrer"},q=n("li",null,[n("code",null,"RememberMeServices.loginSuccess"),e("被调用。如果记住我没有配置，这是一个空操作。")],-1),O=n("li",null,[n("code",null,"ApplicationEventPublisher"),e("发布一个"),n("code",null,"InteractiveAuthenticationSuccessEvent"),e(".")],-1),j=n("code",null,"AuthenticationSuccessHandler",-1),E=n("code",null,"SimpleUrlAuthenticationSuccessHandler",-1),I={href:"https://docs.spring.io/spring-security/reference/servlet/architecture.html#servlet-exceptiontranslationfilter",target:"_blank",rel:"noopener noreferrer"},D=n("code",null,"ExceptionTranslationFilter",-1),L=a('<h6 id="_16、openidauthenticationfilter" tabindex="-1"><a class="header-anchor" href="#_16、openidauthenticationfilter" aria-hidden="true">#</a> 16、OpenIDAuthenticationFilter</h6><p>基于<code>OpenID</code> 认证协议的认证过滤器。 你需要在依赖中依赖额外的相关模块才能启用它。</p><h6 id="_17、defaultloginpagegeneratingfilter" tabindex="-1"><a class="header-anchor" href="#_17、defaultloginpagegeneratingfilter" aria-hidden="true">#</a> 17、DefaultLoginPageGeneratingFilter</h6><p>生成默认的登录页。默认 <code>/login</code> 。</p><h6 id="_18、defaultlogoutpagegeneratingfilter" tabindex="-1"><a class="header-anchor" href="#_18、defaultlogoutpagegeneratingfilter" aria-hidden="true">#</a> 18、DefaultLogoutPageGeneratingFilter</h6><p>生成默认的退出页。 默认 <code>/logout</code> 。</p><h6 id="_19、concurrentsessionfilter" tabindex="-1"><a class="header-anchor" href="#_19、concurrentsessionfilter" aria-hidden="true">#</a> 19、ConcurrentSessionFilter</h6><p>ConcurrentSessionFilter 主要用来判断session是否过期以及更新最新的访问时间。其流程为：</p><p>session 检测，如果不存在直接放行去执行下一个过滤器。存在则进行下一步。 根据sessionid从SessionRegistry中获取SessionInformation，从SessionInformation中获取session是否过期；没有过期则更新SessionInformation中的访问日期； 如果过期，则执行doLogout()方法，这个方法会将session无效，并将 SecurityContext 中的Authentication中的权限置空，同时在SecurityContenxtHoloder中清除SecurityContext然后查看是否有跳转的 expiredUrl，如果有就跳转，没有就输出提示信息。 ConcurrentSessionFilter 通过SessionManagementConfigurer 来进行配置。</p>',9),M={id:"_20、digestauthenticationfilter",tabindex:"-1"},W=n("a",{class:"header-anchor",href:"#_20、digestauthenticationfilter","aria-hidden":"true"},"#",-1),z={href:"https://docs.spring.io/spring-security/reference/servlet/authentication/passwords/digest.html#servlet-authentication-digest",target:"_blank",rel:"noopener noreferrer"},B=n("code",null,"DigestAuthenticationFilter",-1),X=a('<p>Digest<code>身份验证是 </code>Web<code> 应用程序中流行的可选的身份验证机制 。</code>DigestAuthenticationFilter<code>能够处理</code>HTTP<code>头中显示的摘要式身份验证凭据。可以通过</code>HttpSecurity#addFilter()` 来启用和配置相关功能。</p><h6 id="_21、bearertokenauthenticationfilter" tabindex="-1"><a class="header-anchor" href="#_21、bearertokenauthenticationfilter" aria-hidden="true">#</a> 21、BearerTokenAuthenticationFilter</h6><p>验证包含 OAuth 2.0 Bearer Token 的 请求。 此过滤器应与可以验证BearerTokenAuthenticationToken的AuthenticationManager BearerTokenAuthenticationToken 。</p>',3),N={id:"_22、basicauthenticationfilter",tabindex:"-1"},U=n("a",{class:"header-anchor",href:"#_22、basicauthenticationfilter","aria-hidden":"true"},"#",-1),J={href:"https://docs.spring.io/spring-security/reference/servlet/authentication/passwords/basic.html#servlet-authentication-basic",target:"_blank",rel:"noopener noreferrer"},V=n("code",null,"BasicAuthenticationFilter",-1),G=a('<p>和<code>Digest</code>身份验证一样都是<code>Web</code> 应用程序中流行的可选的身份验证机制 。 <code>BasicAuthenticationFilter</code> 负责处理 <code>HTTP</code> 头中显示的基本身份验证凭据。这个 <strong>Spring Security</strong> 的 <strong>Spring Boot</strong> 自动配置默认是启用的 。</p><h6 id="_23、requestcacheawarefilter" tabindex="-1"><a class="header-anchor" href="#_23、requestcacheawarefilter" aria-hidden="true">#</a> 23、RequestCacheAwareFilter</h6><p>用于用户认证成功后，重新恢复因为登录被打断的请求。当匿名访问一个需要授权的资源时。会跳转到认证处理逻辑，此时请求被缓存。在认证逻辑处理完毕后，从缓存中获取最开始的资源请求进行再次请求。</p><p>RequestCacheAwareFilter 通过 HttpScurity#requestCache() 及相关方法引入其配置对象 RequestCacheConfigurer 来进行配置。</p><h6 id="_24、securitycontextholderawarerequestfilter" tabindex="-1"><a class="header-anchor" href="#_24、securitycontextholderawarerequestfilter" aria-hidden="true">#</a> 24、SecurityContextHolderAwareRequestFilter</h6><p>用来 实现j2ee中 Servlet Api 一些接口方法, 比如 getRemoteUser 方法、isUserInRole 方法，在使用 Spring Security 时其实就是通过这个过滤器来实现的。</p><p>SecurityContextHolderAwareRequestFilter 通过 HttpSecurity.servletApi() 及相关方法引入其配置对象 ServletApiConfigurer 来进行配置。</p><h6 id="_25、jaasapiintegrationfilter" tabindex="-1"><a class="header-anchor" href="#_25、jaasapiintegrationfilter" aria-hidden="true">#</a> 25、JaasApiIntegrationFilter</h6><p>适用于JAAS （Java 认证授权服务）。 如果 SecurityContextHolder 中拥有的 Authentication 是一个 JaasAuthenticationToken，那么该 JaasApiIntegrationFilter 将使用包含在 JaasAuthenticationToken 中的 Subject 继续执行 FilterChain。</p><h6 id="_26、remembermeauthenticationfilter" tabindex="-1"><a class="header-anchor" href="#_26、remembermeauthenticationfilter" aria-hidden="true">#</a> 26、RememberMeAuthenticationFilter</h6><p>处理 <strong>记住我</strong> 功能的过滤器。</p><p><code>RememberMeAuthenticationFilter</code> 通过 <code>HttpSecurity.rememberMe()</code> 及相关方法引入其配置对象 <code>RememberMeConfigurer</code> 来进行配置。</p><h6 id="_27、anonymousauthenticationfilter" tabindex="-1"><a class="header-anchor" href="#_27、anonymousauthenticationfilter" aria-hidden="true">#</a> 27、AnonymousAuthenticationFilter</h6><p>匿名认证过滤器。对于 Spring Security 来说，所有对资源的访问都是有 Authentication 的。对于无需登录（UsernamePasswordAuthenticationFilter ）直接可以访问的资源，会授予其匿名用户身份。</p><p>AnonymousAuthenticationFilter 通过 HttpSecurity.anonymous() 及相关方法引入其配置对象 AnonymousConfigurer 来进行配置。</p><h6 id="_28、oauth2authorizationcodegrantfilter" tabindex="-1"><a class="header-anchor" href="#_28、oauth2authorizationcodegrantfilter" aria-hidden="true">#</a> 28、OAuth2AuthorizationCodeGrantFilter</h6><p>表示 OAuth 2.0 授权代码授权，它处理 OAuth 2.0 授权响应的处理。</p>',17),Y={href:"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/oauth2/core/endpoint/OAuth2ParameterNames.html#CODE",target:"_blank",rel:"noopener noreferrer"},K=n("code",null,"code",-1),Q={href:"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/oauth2/core/endpoint/OAuth2ParameterNames.html#STATE",target:"_blank",rel:"noopener noreferrer"},Z=n("code",null,"state",-1),$={href:"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/oauth2/core/endpoint/OAuth2ParameterNames.html#REDIRECT_URI",target:"_blank",rel:"noopener noreferrer"},nn=n("code",null,"redirect_uri",-1),en=n("code",null,"Filter",-1),tn=n("code",null,"Filter",-1),sn={href:"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/oauth2/client/authentication/OAuth2AuthorizationCodeAuthenticationToken.html",target:"_blank",rel:"noopener noreferrer"},an=n("code",null,"OAuth2AuthorizationCodeAuthenticationToken",-1),on={href:"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/oauth2/core/endpoint/OAuth2ParameterNames.html#CODE",target:"_blank",rel:"noopener noreferrer"},rn=n("code",null,"code",-1),cn={href:"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/authentication/AuthenticationManager.html",target:"_blank",rel:"noopener noreferrer"},pn=n("code",null,"AuthenticationManager",-1),ln={href:"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/oauth2/client/OAuth2AuthorizedClient.html",target:"_blank",rel:"noopener noreferrer"},un=n("code",null,"Authorized Client",-1),dn={href:"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/oauth2/client/authentication/OAuth2AuthorizationCodeAuthenticationToken.html#getClientRegistration()",target:"_blank",rel:"noopener noreferrer"},hn=n("code",null,"client",-1),kn={href:"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/oauth2/client/authentication/OAuth2AuthorizationCodeAuthenticationToken.html#getAccessToken()",target:"_blank",rel:"noopener noreferrer"},vn=n("code",null,"access token",-1),mn=n("code",null,"Principal",-1),gn={href:"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/oauth2/client/web/OAuth2AuthorizedClientRepository.html",target:"_blank",rel:"noopener noreferrer"},_n=n("code",null,"OAuth2AuthorizedClientRepository",-1),fn=n("h6",{id:"_29、sessionmanagementfilter",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_29、sessionmanagementfilter","aria-hidden":"true"},"#"),e(" 29、SessionManagementFilter")],-1),bn=n("p",null,"Session 管理器过滤器，内部维护了一个 SessionAuthenticationStrategy 用于管理 Session 。",-1),Sn=n("p",null,"SessionManagementFilter 通过 HttpScurity#sessionManagement() 及相关方法引入其配置对象 SessionManagementConfigurer 来进行配置。",-1),yn={href:"https://docs.spring.io/spring-security/reference/servlet/architecture.html#servlet-exceptiontranslationfilter",target:"_blank",rel:"noopener noreferrer"},xn=n("code",null,"ExceptionTranslationFilter",-1),wn={href:"https://docs.spring.io/spring-security/site/docs/5.6.0/api/org/springframework/security/web/access/ExceptionTranslationFilter.html",target:"_blank",rel:"noopener noreferrer"},Cn=n("code",null,"ExceptionTranslationFilter",-1),Fn={href:"https://docs.spring.io/spring-security/site/docs/5.6.0/api/org/springframework/security/access/AccessDeniedException.html",target:"_blank",rel:"noopener noreferrer"},An=n("code",null,"AccessDeniedException",-1),Tn={href:"https://docs.spring.io/spring-security/site/docs/5.6.0/api//org/springframework/security/core/AuthenticationException.html",target:"_blank",rel:"noopener noreferrer"},Rn=n("code",null,"AuthenticationException",-1),Hn=n("code",null,"ExceptionTranslationFilter",-1),Pn={href:"https://docs.spring.io/spring-security/reference/servlet/architecture.html#servlet-security-filters",target:"_blank",rel:"noopener noreferrer"},qn={href:"https://docs.spring.io/spring-security/reference/servlet/architecture.html#servlet-filterchainproxy",target:"_blank",rel:"noopener noreferrer"},On=n("li",null,[e("首先"),n("code",null,"ExceptionTranslationFilter"),e("调用"),n("code",null,"FilterChain.doFilter(request, response)"),e("应用程序的其余部分。")],-1),jn=n("code",null,"AuthenticationException",-1),En=n("em",null,"启动身份验证",-1),In={href:"https://docs.spring.io/spring-security/reference/servlet/authentication/architecture.html#servlet-authentication-securitycontextholder",target:"_blank",rel:"noopener noreferrer"},Dn=n("code",null,"HttpServletRequest",-1),Ln={href:"https://docs.spring.io/spring-security/site/docs/5.6.0/api/org/springframework/security/web/savedrequest/RequestCache.html",target:"_blank",rel:"noopener noreferrer"},Mn=n("code",null,"RequestCache",-1),Wn=n("code",null,"RequestCache",-1),zn=n("li",null,[n("code",null,"AuthenticationEntryPoint"),e("用于从客户机请求的凭证。例如，它可能会重定向到登录页面或发送"),n("code",null,"WWW-Authenticate"),e("标头。")],-1),Bn=n("li",null,[e("否则，如果是"),n("code",null,"AccessDeniedException"),e("，则"),n("em",null,"拒绝访问"),e("。将"),n("code",null,"AccessDeniedHandler"),e("被调用，以拒绝提手接近。")],-1),Xn={id:"_31、filtersecurityinterceptor",tabindex:"-1"},Nn=n("a",{class:"header-anchor",href:"#_31、filtersecurityinterceptor","aria-hidden":"true"},"#",-1),Un={href:"https://docs.spring.io/spring-security/reference/servlet/authorization/authorize-requests.html#servlet-authorization-filtersecurityinterceptor",target:"_blank",rel:"noopener noreferrer"},Jn=n("code",null,"FilterSecurityInterceptor",-1),Vn=n("p",null,"这个过滤器决定了访问特定路径应该具备的权限，访问的用户的角色，权限是什么？访问的路径需要什么样的角色和权限？这些判断和处理都是由该类进行的",-1),Gn={href:"https://docs.spring.io/spring-security/reference/servlet/authentication/architecture.html#servlet-authentication-securitycontextholder",target:"_blank",rel:"noopener noreferrer"},Yn=n("code",null,"FilterSecurityInterceptor",-1),Kn={href:"https://docs.spring.io/spring-security/reference/servlet/authentication/architecture.html#servlet-authentication-authentication",target:"_blank",rel:"noopener noreferrer"},Qn=n("code",null,"FilterSecurityInterceptor",-1),Zn={href:"https://docs.spring.io/spring-security/site/docs/5.6.0/api/org/springframework/security/web/FilterInvocation.html",target:"_blank",rel:"noopener noreferrer"},$n=n("code",null,"FilterInvocation",-1),ne=n("code",null,"HttpServletRequest",-1),ee=n("code",null,"HttpServletResponse",-1),te=n("code",null,"FilterChain",-1),se=n("code",null,"FilterSecurityInterceptor",-1),ae=n("li",null,[e("接下来，它通过"),n("code",null,"FilterInvocation"),e("to"),n("code",null,"SecurityMetadataSource"),e("来获取"),n("code",null,"ConfigAttributes")],-1),oe=n("code",null,"Authentication",-1),ie=n("code",null,"FilterInvocation",-1),re=n("code",null,"ConfigAttribute",-1),ce=n("code",null,"AccessDecisionManager",-1),pe=n("code",null,"AccessDeniedException",-1),le={href:"https://docs.spring.io/spring-security/reference/servlet/architecture.html#servlet-exceptiontranslationfilter",target:"_blank",rel:"noopener noreferrer"},ue=n("code",null,"ExceptionTranslationFilter",-1),de=n("code",null,"AccessDeniedException",-1),he=n("code",null,"FilterSecurityInterceptor",-1),ke={href:"https://docs.spring.io/spring-security/reference/servlet/architecture.html#servlet-filters-review",target:"_blank",rel:"noopener noreferrer"},ve=a(`<p>默认情况下，Spring Security 的授权将要求对所有请求进行身份验证。显式配置如下所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
	http
		<span class="token comment">// ...</span>
		<span class="token punctuation">.</span><span class="token function">authorizeHttpRequests</span><span class="token punctuation">(</span>authorize <span class="token operator">-&gt;</span> authorize
			<span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以通过按优先顺序添加更多规则来配置 Spring Security 以具有不同的规则。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
	http
		<span class="token comment">// ...</span>
		<span class="token punctuation">.</span><span class="token function">authorizeHttpRequests</span><span class="token punctuation">(</span>authorize <span class="token operator">-&gt;</span> authorize
			<span class="token punctuation">.</span><span class="token function">mvcMatchers</span><span class="token punctuation">(</span><span class="token string">&quot;/resources/**&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/signup&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/about&quot;</span><span class="token punctuation">)</span>
                               <span class="token comment">// 任何用户都可以访问请求。</span>
                               <span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token comment">// 	任何以“/admin/”开头的 URL 将被限制为具有“ROLE_ADMIN”角色的用户。您会注意到，由于我们正在调用该hasRole方法，因此不需要指定“ROLE_”前缀。                              </span>
			<span class="token punctuation">.</span><span class="token function">mvcMatchers</span><span class="token punctuation">(</span><span class="token string">&quot;/admin/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">&quot;ADMIN&quot;</span><span class="token punctuation">)</span>
			<span class="token comment">// 任何以“/db/”开头的 URL 都要求用户同时拥有“ROLE_ADMIN”和“ROLE_DBA”。您会注意到，由于我们使用的是hasRole表达式，因此不需要指定“ROLE_”前缀。                               </span>
			<span class="token punctuation">.</span><span class="token function">mvcMatchers</span><span class="token punctuation">(</span><span class="token string">&quot;/db/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span><span class="token string">&quot;hasRole(&#39;ADMIN&#39;) and hasRole(&#39;DBA&#39;)&quot;</span><span class="token punctuation">)</span>
			<span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">denyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_32、switchuserfilter" tabindex="-1"><a class="header-anchor" href="#_32、switchuserfilter" aria-hidden="true">#</a> 32、SwitchUserFilter</h6><blockquote><p><code>SwitchUserFilter</code> 是用来做账户切换的。默认的切换账号的<code>url</code>为<code>/login/impersonate</code>，默认注销切换账号的<code>url</code>为<code>/logout/impersonate</code>，默认的账号参数为<code>username</code> 。</p><p>可以通过此类实现自定义的账户切换。</p></blockquote><h3 id="防止漏洞利用" tabindex="-1"><a class="header-anchor" href="#防止漏洞利用" aria-hidden="true">#</a> 防止漏洞利用</h3><h4 id="csrf" tabindex="-1"><a class="header-anchor" href="#csrf" aria-hidden="true">#</a> CSRF</h4><h5 id="什么是-csrf-攻击" tabindex="-1"><a class="header-anchor" href="#什么是-csrf-攻击" aria-hidden="true">#</a> 什么是 CSRF 攻击？</h5>`,9),me=n("strong",null,"Cross-site request forgery",-1),ge={href:"https://en.wikipedia.org/wiki/Exploit_(computer_security)",target:"_blank",rel:"noopener noreferrer"},_e={href:"https://en.wikipedia.org/wiki/Website",target:"_blank",rel:"noopener noreferrer"},fe={href:"https://en.wikipedia.org/wiki/User_(computing)",target:"_blank",rel:"noopener noreferrer"},be={href:"https://en.wikipedia.org/wiki/JavaScript",target:"_blank",rel:"noopener noreferrer"},Se={href:"https://en.wikipedia.org/wiki/Cross-site_scripting",target:"_blank",rel:"noopener noreferrer"},ye=n("p",null,"在 CSRF 攻击中，无辜的最终用户被攻击者诱骗提交了一个他们不想要的 Web 请求。这可能会导致在网站上执行操作，包括无意中泄露客户端或服务器数据、更改会话状态或操纵最终用户的帐户。",-1),xe=n("h5",{id:"防范csrf攻击",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#防范csrf攻击","aria-hidden":"true"},"#"),e(" 防范CSRF攻击")],-1),we=n("p",null,"之所以可能发生CSRF攻击，是因为受害者网站的HTTP请求和攻击者网站的请求完全相同。这意味着无法拒绝来自邪恶网站的请求并允许来自银行网站的请求。为了防止 CSRF 攻击，我们需要确保请求中存在恶意站点无法提供的内容，以便我们可以区分这两个请求。",-1),Ce=n("p",null,"Spring 提供了两种机制来防止 CSRF 攻击：",-1),Fe={href:"https://docs.spring.io/spring-security/reference/features/exploits/csrf.html#csrf-protection-stp",target:"_blank",rel:"noopener noreferrer"},Ae={href:"https://docs.spring.io/spring-security/reference/features/exploits/csrf.html#csrf-protection-ssa",target:"_blank",rel:"noopener noreferrer"},Te={href:"https://docs.spring.io/spring-security/reference/features/exploits/csrf.html#csrf-protection-idempotent",target:"_blank",rel:"noopener noreferrer"},Re={href:"https://docs.spring.io/spring-security/reference/features/exploits/csrf.html#csrf-protection",target:"_blank",rel:"noopener noreferrer"},He={href:"https://tools.ietf.org/html/rfc7231#section-4.2.1",target:"_blank",rel:"noopener noreferrer"},Pe=n("code",null,"GET",-1),qe=n("code",null,"HEAD",-1),Oe=n("code",null,"OPTIONS",-1),je=n("code",null,"TRACE",-1),Ee=n("h5",{id:"同步器令牌模式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#同步器令牌模式","aria-hidden":"true"},"#"),e(" 同步器令牌模式")],-1),Ie={href:"https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#synchronizer-token-pattern",target:"_blank",rel:"noopener noreferrer"},De=n("p",null,"提交 HTTP 请求时，服务器必须查找预期的 CSRF 令牌并将其与 HTTP 请求中的实际 CSRF 令牌进行比较。如果值不匹配，则应拒绝 HTTP 请求。",-1),Le=n("p",null,"这项工作的关键是实际的 CSRF 令牌应该位于浏览器不会自动包含的 HTTP 请求的一部分中。例如，在 HTTP 参数或 HTTP 标头中要求实际 CSRF 令牌将防止 CSRF 攻击。在 cookie 中要求实际的 CSRF 令牌是行不通的，因为浏览器会自动将 cookie 包含在 HTTP 请求中。",-1),Me={href:"https://docs.spring.io/spring-security/reference/features/exploits/csrf.html#csrf-protection-idempotent",target:"_blank",rel:"noopener noreferrer"},We=a(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">// 默认已启用 CSRF 保护，并将 csrf token 存储在 session 中</span>
                http<span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">csrfTokenRepository</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LazyCsrfTokenRepository</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpSessionCsrfTokenRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>相同站点属性</strong></p>`,2),ze={href:"https://docs.spring.io/spring-security/reference/features/exploits/csrf.html#csrf",target:"_blank",rel:"noopener noreferrer"},Be={href:"https://tools.ietf.org/html/draft-west-first-party-cookies",target:"_blank",rel:"noopener noreferrer"},Xe=n("code",null,"SameSite",-1),Ne={href:"https://spring.io/projects/spring-session",target:"_blank",rel:"noopener noreferrer"},Ue=n("code",null,"SameSite",-1),Je={href:"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/server/session/CookieWebSessionIdResolver.html",target:"_blank",rel:"noopener noreferrer"},Ve=n("code",null,"SameSite",-1),Ge=n("p",null,[e("例如，具有该"),n("code",null,"SameSite"),e("属性的HTTP 响应标头可能如下所示：")],-1),Ye=n("div",{class:"language-text line-numbers-mode","data-ext":"text"},[n("pre",{class:"language-text"},[n("code",null,`Set-Cookie: JSESSIONID=randomid; Domain=bank.example.com; Secure; HttpOnly; SameSite=Lax
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),Ke=n("p",null,[n("code",null,"SameSite"),e("属性的有效值为：")],-1),Qe=n("code",null,"Strict",-1),Ze={href:"https://tools.ietf.org/html/draft-west-first-party-cookies-07#section-2.1",target:"_blank",rel:"noopener noreferrer"},$e=n("code",null,"Lax",-1),nt={href:"https://tools.ietf.org/html/draft-west-first-party-cookies-07#section-2.1",target:"_blank",rel:"noopener noreferrer"},et={href:"https://docs.spring.io/spring-security/reference/features/exploits/csrf.html#csrf-protection-idempotent",target:"_blank",rel:"noopener noreferrer"},tt=n("p",null,[e("随着"),n("code",null,"SameSite"),e("我们的会话cookie属性集，浏览器将继续发送"),n("code",null,"JSESSIONID"),e("从银行网站来请求的cookie。但是，浏览器将不再发送"),n("code",null,"JSESSIONID"),e("带有来自恶意网站的传输请求的cookie。由于会话不再出现在来自恶意网站的传输请求中，因此应用程序可以免受 CSRF 攻击。")],-1),st={href:"https://tools.ietf.org/html/draft-west-first-party-cookies-07#section-5",target:"_blank",rel:"noopener noreferrer"},at=n("code",null,"SameSite",-1),ot=n("code",null,"SameSite",-1),it=n("code",null,"Strict",-1),rt={href:"https://social.example.com/",target:"_blank",rel:"noopener noreferrer"},ct={href:"https://email.example.org/",target:"_blank",rel:"noopener noreferrer"},pt=n("code",null,"SameSite",-1),lt=n("code",null,"Strict",-1),ut=n("code",null,"SameSite",-1),dt={href:"https://github.com/spring-projects/spring-security/issues/7537",target:"_blank",rel:"noopener noreferrer"},ht=n("code",null,"SameSite",-1),kt=n("code",null,"SameSite",-1),vt={href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/headers/Set-Cookie#Browser_compatibility",target:"_blank",rel:"noopener noreferrer"},mt=a(`<p>出于这个原因，通常建议使用该<code>SameSite</code>属性作为深度防御，而不是针对 CSRF 攻击的唯一保护。</p><h5 id="何时使用csrf-保护" tabindex="-1"><a class="header-anchor" href="#何时使用csrf-保护" aria-hidden="true">#</a> 何时使用CSRF 保护</h5><p>什么时候应该使用 CSRF 保护？建议是对普通用户可以由浏览器处理的任何请求使用 CSRF 保护。如果您只创建供非浏览器客户端使用的服务，可能不需要 CSRF 保护。</p><h5 id="csrf-和无状态浏览器应用程序" tabindex="-1"><a class="header-anchor" href="#csrf-和无状态浏览器应用程序" aria-hidden="true">#</a> CSRF 和无状态浏览器应用程序</h5><p>如果我的应用程序是无状态的怎么办？这并不一定意味着您受到保护。事实上，如果用户不需要在 Web 浏览器中针对给定请求执行任何操作，他们可能仍然容易受到 CSRF 攻击。</p><p>例如，考虑一个应用程序，它使用一个自定义 cookie，其中包含用于身份验证的所有状态而不是 JSESSIONID。当进行 CSRF 攻击时，自定义 cookie 将与请求一起发送，方式与我们之前示例中发送 JSESSIONID cookie 的方式相同。此应用程序将容易受到 CSRF 攻击。</p><p>使用基本身份验证的应用程序也容易受到 CSRF 攻击。该应用程序很容易受到攻击，因为浏览器会自动在任何请求中包含用户名和密码，其方式与我们之前示例中发送 JSESSIONID cookie 的方式相同。</p><h4 id="http-headers" tabindex="-1"><a class="header-anchor" href="#http-headers" aria-hidden="true">#</a> Http Headers</h4><p>Spring Security 提供了一组默认的与安全相关的 HTTP 响应头来提供安全的默认值</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Cache-Control: no-cache, no-store, max-age=0, must-revalidate
Pragma: no-cache
Expires: 0
X-Content-Type-Options: nosniff
# 仅添加到HTTPS请求上
Strict-Transport-Security: max-age=31536000 ; includeSubDomains
X-Frame-Options: DENY
X-XSS-Protection: 1; mode=block
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置示例</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableWebSecurity</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSecurityConfig</span> <span class="token keyword">extends</span>
		<span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		http
			<span class="token comment">// ...</span>
			<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span>headers <span class="token operator">-&gt;</span> headers
                 <span class="token comment">// 自定义默认安全响应头</span>
				<span class="token punctuation">.</span><span class="token function">frameOptions</span><span class="token punctuation">(</span>frameOptions <span class="token operator">-&gt;</span> frameOptions
					<span class="token punctuation">.</span><span class="token function">sameOrigin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
				<span class="token punctuation">)</span>
                 <span class="token comment">// 除非明确列出，否则不要使用任何默认标头</span>
				<span class="token punctuation">.</span><span class="token function">defaultsDisabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                 <span class="token comment">// 自定义缓存控制标头</span>
                <span class="token punctuation">.</span><span class="token function">cacheControl</span><span class="token punctuation">(</span><span class="token function">withDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                 <span class="token comment">// 禁用所有HTTP 安全标头</span>
                <span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Cache Control</strong></p><p>Spring Security 的默认设置是禁用缓存以保护用户的内容</p><p>如果用户通过身份验证查看敏感信息然后注销，我们不希望恶意用户能够点击后退按钮查看敏感信息。默认发送的缓存控制头是：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Cache-Control: no-cache, no-store, max-age=0, must-revalidate
Pragma: no-cache
Expires: 0

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，Spring Security 默认添加这些响应头。自己可以提供缓存控制响应头覆盖默认值。这允许应用程序确保可以缓存 CSS 和 JavaScript 等静态资源。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		http
			<span class="token comment">// ...</span>
			<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span>headers <span class="token operator">-&gt;</span> headers
                 <span class="token comment">// 禁用缓存控制</span>
				<span class="token punctuation">.</span><span class="token function">cacheControl</span><span class="token punctuation">(</span>cache <span class="token operator">-&gt;</span> cache<span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Content Type Options</strong></p><p>浏览器会通过猜测未指定内容类型的资源的内容类型来改善用户体验。例如如果浏览器遇到没有指定内容类型的 JavaScript 文件，它可以猜测内容类型然后运行它。</p><p>内容嗅探的问题在于，这允许恶意用户使用多语言（即作为多种内容类型有效的文件）来执行 XSS 攻击</p><p>默认情况下，Spring Security 通过向 HTTP 响应添加以下头来禁用内容嗅探</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>X-Content-Type-Options: nosniff

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		http
			<span class="token comment">// ...</span>
			<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span>headers <span class="token operator">-&gt;</span> headers
                 <span class="token comment">// 禁用内容类型选项</span>
				<span class="token punctuation">.</span><span class="token function">cacheControl</span><span class="token punctuation">(</span>cache <span class="token operator">-&gt;</span> cache<span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Http Strict Transport Security (HSTS)</strong></p><p>当使用 http 访问网站时，如果省略 https 协议，则可能容易收到中间人攻击。即使网站执行重定向到 https，恶意用户也可以拦截初始 http 请求并操纵响应。</p><p>许多用户省略了 https 协议，这就是创建该响应头的原因。一旦将域名添加为 HSTS 主机，浏览器就可以提前知道该域名的任何请求都应该被解释为https。这大大降低了中间人攻击发生的可能性。</p><blockquote><p>HSTS 标头仅注入到 HTTPS 响应中。为了让浏览器确认响应头，浏览器必须首先信任签署用于建立连接的 SSL 证书的 CA（不仅仅是 SSL 证书）。</p></blockquote><p>将站点标记为 HSTS 主机的一种方法是将主机预加载到浏览器中。另一种方法是将<code>Strict-Transport-Security</code>标头添加到响应中。例如，Spring Security 的默认行为是添加以下标头，指示浏览器将域视为 HSTS 主机一年（一年大约有 31536000 秒）：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Strict-Transport-Security: max-age=31536000 ; includeSubDomains ; preload

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>[可选] <code>includeSubDomains</code> 指令指示浏览器子域也应该被视为 HSTS 域</p><p>[可选] <code>preload</code> 指令指示浏览器应该将域作为 HSTS 域预加载到浏览器中</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
		http
			<span class="token comment">// ...</span>
			<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span>headers <span class="token operator">-&gt;</span> headers
                <span class="token comment">// 显示定义参数</span>
				<span class="token punctuation">.</span><span class="token function">httpStrictTransportSecurity</span><span class="token punctuation">(</span>hsts <span class="token operator">-&gt;</span> hsts
					<span class="token punctuation">.</span><span class="token function">includeSubDomains</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
					<span class="token punctuation">.</span><span class="token function">preload</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
					<span class="token punctuation">.</span><span class="token function">maxAgeInSeconds</span><span class="token punctuation">(</span><span class="token number">31536000</span><span class="token punctuation">)</span>
				<span class="token punctuation">)</span>
			<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>X-Frame-Options</strong></p>`,34),gt={href:"https://en.wikipedia.org/wiki/Clickjacking",target:"_blank",rel:"noopener noreferrer"},_t={href:"https://www.owasp.org/index.php/Clickjacking_Defense_Cheat_Sheet#Best-for-now_Legacy_Browser_Frame_Breaking_Script",target:"_blank",rel:"noopener noreferrer"},ft={href:"https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options",target:"_blank",rel:"noopener noreferrer"},bt=a(`<p>默认情况下，Spring Security 使用以下标头禁用 iframe 中的渲染页面：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>X-Frame-Options: DENY

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
		http
			<span class="token comment">// ...</span>
			<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span>headers <span class="token operator">-&gt;</span> headers
				<span class="token punctuation">.</span><span class="token function">frameOptions</span><span class="token punctuation">(</span>frameOptions <span class="token operator">-&gt;</span> frameOptions
					<span class="token punctuation">.</span><span class="token function">sameOrigin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
				<span class="token punctuation">)</span>
			<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>X-XSS-Protection</strong></p><p>一些浏览器内置了对过滤反射 XSS 攻击的支持。虽然不是万无一失的，但确实有助于 XSS 保护。</p><p>过滤通常默认启用，因此添加标头通常只是确保启用它并指示浏览器在检测到 XSS 攻击时要执行的操作。例如，过滤器可能会尝试以侵入性最小的方式更改内容以仍然呈现所有内容。有时，这种类型的替换本身就可能成为 XSS 漏洞。相反最好阻止内容而不是尝试修复它。</p><p>默认情况下，Spring Security 使用以下标头阻止内容：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>X-XSS-Protection: 1; mode=block

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
		http
			<span class="token comment">// ...</span>
			<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span>headers <span class="token operator">-&gt;</span> headers
                <span class="token comment">// 关闭浏览器过滤</span>
				<span class="token punctuation">.</span><span class="token function">xssProtection</span><span class="token punctuation">(</span>xss <span class="token operator">-&gt;</span> xss
					<span class="token punctuation">.</span><span class="token function">block</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
				<span class="token punctuation">)</span>
			<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Content Security Policy(CSP)</strong></p><p>内容安全政策是一种机制，web应用程序可以利用它来缓解内容注入漏洞，例如例如跨站点脚本 (XSS)。CSP 是一种声明性策略，它为 Web 应用程序作者提供了一种工具，用于声明并最终通知客户端（用户代理）Web 应用程序期望加载资源的来源。</p><p>Web 应用程序可以通过在响应中包含以下 HTTP 标头之一来使用 CSP：</p><ul><li><code>Content-Security-Policy</code></li><li><code>Content-Security-Policy-Report-Only</code></li></ul><p>这两个响应头都用作向客户端提供安全策略的机制。安全策略包含一组安全策略指令，每个指令负责声明对特定资源表示的限制</p><p>内容安全策略示例</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Content-Security-Policy: script-src https://trustedscripts.example.com

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,16),St=n("code",null,"script-src",-1),yt={href:"https://www.w3.org/TR/CSP2/#directive-report-uri",target:"_blank",rel:"noopener noreferrer"},xt=a(`<p>给定以下响应标头，该策略声明可以从两个可能来源之一加载脚本。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Content-Security-Policy-Report-Only: script-src &#39;self&#39; https://trustedscripts.example.com; report-uri /csp-report-endpoint/

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		http
			<span class="token comment">// ...</span>
			<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span>headers <span class="token operator">-&gt;</span> headers
				<span class="token punctuation">.</span><span class="token function">contentSecurityPolicy</span><span class="token punctuation">(</span>csp <span class="token operator">-&gt;</span> csp
					<span class="token punctuation">.</span><span class="token function">policyDirectives</span><span class="token punctuation">(</span><span class="token string">&quot;script-src &#39;self&#39; https://trustedscripts.example.com; object-src https://trustedplugins.example.com; report-uri /csp-report-endpoint/&quot;</span><span class="token punctuation">)</span>
				<span class="token punctuation">)</span>
                <span class="token comment">// 启用 CSPreport-only标头</span>
                <span class="token punctuation">.</span><span class="token function">reportOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Referrer Policy</strong></p><p>引用策略是一种机制，web应用程序可以利用该机制来管理引用字段，该字段包含用户所在的最后一页。</p>`,5),wt={href:"https://www.w3.org/TR/referrer-policy/",target:"_blank",rel:"noopener noreferrer"},Ct={href:"https://www.w3.org/TR/referrer-policy/#referrer-policies",target:"_blank",rel:"noopener noreferrer"},Ft=a(`<p>示例</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Referrer-Policy: same-origin

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		http
			<span class="token comment">// ...</span>
			<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span>headers <span class="token operator">-&gt;</span> headers
				<span class="token punctuation">.</span><span class="token function">referrerPolicy</span><span class="token punctuation">(</span>referrer <span class="token operator">-&gt;</span> referrer
					<span class="token punctuation">.</span><span class="token function">policy</span><span class="token punctuation">(</span><span class="token class-name">ReferrerPolicy</span><span class="token punctuation">.</span><span class="token constant">SAME_ORIGIN</span><span class="token punctuation">)</span>
				<span class="token punctuation">)</span>
			<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Feature Policy</strong></p>`,4),At={href:"https://wicg.github.io/feature-policy/",target:"_blank",rel:"noopener noreferrer"},Tt=a(`<p>示例</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Feature-Policy: geolocation &#39;self&#39;

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>借助功能策略，开发人员可以选择加入一组“策略”，以便浏览器强制执行整个站点中使用的特定功能。这些策略限制站点可以访问哪些 API 或修改浏览器的某些功能的默认行为。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
		http
			<span class="token comment">// ...</span>
			<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span>headers <span class="token operator">-&gt;</span> headers
				<span class="token punctuation">.</span><span class="token function">featurePolicy</span><span class="token punctuation">(</span><span class="token string">&quot;geolocation &#39;self&#39;&quot;</span><span class="token punctuation">)</span>
			<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Permissions Policy</strong></p>`,5),Rt={href:"https://w3c.github.io/webappsec-permissions-policy/",target:"_blank",rel:"noopener noreferrer"},Ht=a(`<p>示例</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Permissions-Policy: geolocation=(self)

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>借助权限策略，开发人员可以为浏览器选择一组“策略”，以强制执行整个站点中使用的特定功能。这些策略限制站点可以访问哪些 API 或修改浏览器的某些功能的默认行为。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
		http
			<span class="token comment">// ...</span>
			<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span>headers <span class="token operator">-&gt;</span> headers
				<span class="token punctuation">.</span><span class="token function">permissionsPolicy</span><span class="token punctuation">(</span>permissions <span class="token operator">-&gt;</span> permissions
					<span class="token punctuation">.</span><span class="token function">policy</span><span class="token punctuation">(</span><span class="token string">&quot;geolocation=(self)&quot;</span><span class="token punctuation">)</span>
				<span class="token punctuation">)</span>
			<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Clear Site Data</strong></p>`,5),Pt={href:"https://www.w3.org/TR/clear-site-data/",target:"_blank",rel:"noopener noreferrer"},qt={href:"https://www.w3.org/TR/clear-site-data/",target:"_blank",rel:"noopener noreferrer"},Ot=a(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Clear-Site-Data: &quot;cache&quot;, &quot;cookies&quot;, &quot;storage&quot;, &quot;executionContexts&quot;

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这是在注销时执行的一个很好的清理操作。</p><p>可以使用以下配置在注销时发送</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
		http
			<span class="token comment">// ...</span>
			<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
				<span class="token punctuation">.</span><span class="token function">addLogoutHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HeaderWriterLogoutHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClearSiteDataHeaderWriter</span><span class="token punctuation">(</span><span class="token constant">CACHE</span><span class="token punctuation">,</span> <span class="token constant">COOKIES</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Custom Headers</strong></p><p>Spring Security 有一些机制可以方便地将更常见的安全标头添加到您的应用程序中。但是，它还提供挂钩以启用添加自定义标头。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
		http
			<span class="token comment">// ...</span>
			<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span>headers <span class="token operator">-&gt;</span> headers
				<span class="token punctuation">.</span><span class="token function">addHeaderWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StaticHeadersWriter</span><span class="token punctuation">(</span><span class="token string">&quot;X-Custom-Security-Header&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;header-value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="http-请求" tabindex="-1"><a class="header-anchor" href="#http-请求" aria-hidden="true">#</a> Http 请求</h4>`,8),jt={href:"https://www.troyhunt.com/heres-why-your-static-website-needs-https/",target:"_blank",rel:"noopener noreferrer"},Et={href:"https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html",target:"_blank",rel:"noopener noreferrer"},It=a(`<p>作为一个框架，Spring Security 不处理 HTTP 连接，因此不直接提供对 HTTPS 的支持。但是它提供了许多有助于使用 HTTPS 的功能。</p><p><strong>Redirect to https</strong></p><p>当客户端使用 HTTP 时，Spring Security可以配置为在Servlet和WebFlux环境中重定向到HTTPS</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableWebSecurity</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSecurityConfig</span> <span class="token keyword">extends</span>
		<span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		http
			<span class="token comment">// ...</span>
			<span class="token punctuation">.</span><span class="token function">requiresChannel</span><span class="token punctuation">(</span>channel <span class="token operator">-&gt;</span> channel
				<span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">requiresSecure</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Strict Transport Security</strong></p>`,5),Dt={href:"https://docs.spring.io/spring-security/reference/features/exploits/headers.html#headers-hsts",target:"_blank",rel:"noopener noreferrer"},Lt=n("p",null,[n("strong",null,"Proxy Server Configuration")],-1),Mt={href:"https://192.168.0.1:8080/",target:"_blank",rel:"noopener noreferrer"},Wt={href:"https://192.168.0.1:8080/",target:"_blank",rel:"noopener noreferrer"},zt={href:"https://tools.ietf.org/html/rfc7239",target:"_blank",rel:"noopener noreferrer"},Bt={href:"https://tomcat.apache.org/tomcat-8.0-doc/api/org/apache/catalina/valves/RemoteIpValve.html",target:"_blank",rel:"noopener noreferrer"},Xt={href:"https://www.eclipse.org/jetty/javadoc/jetty-9/org/eclipse/jetty/server/ForwardedRequestCustomizer.html",target:"_blank",rel:"noopener noreferrer"},Nt={href:"https://github.com/spring-projects/spring-framework/blob/v4.3.3.RELEASE/spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java",target:"_blank",rel:"noopener noreferrer"},Ut=n("p",null,[e("Spring Boot 用户可以使用该"),n("code",null,"server.forward-headers-strategy"),e("属性来配置应用程序。")],-1);function Jt(Vt,Gt){const t=i("ExternalLinkIcon");return r(),c("div",null,[l,n("h6",u,[d,e(" 15、"),n("a",h,[k,s(t)])]),n("p",null,[e("当用户提交他们的用户名和密码，则"),v,e("创建一个"),m,e("其是一种类型的"),n("a",g,[_,s(t)]),e("通过提取从所述用户名和密码"),f,e("。")]),n("p",null,[e("接下来，将"),b,e("传递到"),S,e("要进行身份验证的 。"),y,e("外观的详细信息取决于"),n("a",x,[e("用户信息的存储方式"),s(t)]),e("。")]),w,n("ul",null,[n("li",null,[e("该"),n("a",C,[e("SecurityContextHolder中"),s(t)]),e("被清除出去。")]),F,A]),T,n("ul",null,[R,n("li",null,[e("该"),n("a",H,[e("认证"),s(t)]),e("被设置在"),n("a",P,[e("SecurityContextHolder中"),s(t)]),e("。")]),q,O,n("li",null,[e("在"),j,e("被调用。通常，这"),E,e("将重定向到"),n("a",I,[D,s(t)]),e("我们重定向到登录页面时保存的请求。")])]),L,n("h6",M,[W,e(" 20、"),n("a",z,[B,s(t)])]),X,n("h6",N,[U,e(" 22、"),n("a",J,[V,s(t)])]),G,n("ul",null,[n("li",null,[e("假设最终用户（资源所有者）已授予对客户端的访问权限，则授权服务器会将"),n("a",Y,[K,s(t)]),e("和 "),n("a",Q,[Z,s(t)]),e("参数附加到 "),n("a",$,[nn,s(t)]),e("（在授权请求中提供）并将最终用户的用户代理重定向回此"),en,e("（客户端）。")]),n("li",null,[tn,e("然后，这将"),n("a",sn,[an,s(t)]),e("使用"),n("a",on,[rn,s(t)]),e("接收到的创建一个 并将其 委托给 "),n("a",cn,[pn,s(t)]),e("进行身份验证。")]),n("li",null,[e("身份验证成功后，"),n("a",ln,[un,s(t)]),e("通过"),n("a",dn,[hn,s(t)]),e("将"),n("a",kn,[vn,s(t)]),e(" 与当前相关联 "),mn,e("并通过 "),n("a",gn,[_n,s(t)]),e(".")])]),fn,bn,Sn,n("p",null,[e("30、"),n("a",yn,[xn,s(t)])]),n("p",null,[e("在"),n("a",wn,[Cn,s(t)]),e("允许的翻译"),n("a",Fn,[An,s(t)]),e("和"),n("a",Tn,[Rn,s(t)]),e("到HTTP响应。")]),n("p",null,[Hn,e("作为"),n("a",Pn,[e("安全过滤器"),s(t)]),e("之一插入到"),n("a",qn,[e("FilterChainProxy"),s(t)]),e("中。")]),n("ol",null,[On,n("li",null,[e("如果用户未通过身份验证或者是"),jn,e("，则"),En,e("。 "),n("ul",null,[n("li",null,[e("该"),n("a",In,[e("SecurityContextHolder中"),s(t)]),e("被清除出")]),n("li",null,[e("将"),Dn,e("被保存在"),n("a",Ln,[Mn,s(t)]),e("。当用户成功认证时，"),Wn,e("用于重放原始请求。")]),zn,Bn])])]),n("h6",Xn,[Nn,e(" 31、"),n("a",Un,[Jn,s(t)])]),Vn,n("ol",null,[n("li",null,[e("首先从"),n("a",Gn,[e("SecurityContextHolder"),s(t)]),Yn,e("获取"),n("a",Kn,[e("身份验证"),s(t)]),e("。")]),n("li",null,[e("其次，"),Qn,e("创建一个"),n("a",Zn,[$n,s(t)]),e("从"),ne,e("，"),ee,e("和"),te,e("被传入"),se,e("。")]),ae,n("li",null,[e("最后，经过"),oe,e("，"),ie,e("以及"),re,e("年代到"),ce,e("。 "),n("ol",null,[n("li",null,[e("如果授权被拒绝，"),pe,e("则抛出an 。在这种情况下，"),n("a",le,[ue,s(t)]),e("处理"),de,e(".")]),n("li",null,[e("如果授予访问权限，则"),he,e("继续使用允许应用程序正常处理的"),n("a",ke,[e("FilterChain"),s(t)]),e("。")])])])]),ve,n("p",null,[me,e(" 跨站点请求伪造，是一种类型的恶意"),n("a",ge,[e("攻击"),s(t)]),e("一个的"),n("a",_e,[e("网站"),s(t)]),e("的情况下擅自命令从提交的"),n("a",fe,[e("用户"),s(t)]),e("Web 应用程序信任的。恶意网站可以通过多种方式传输此类命令；例如，特制的图像标签、隐藏表单和"),n("a",be,[e("JavaScript"),s(t)]),e(" XMLHttpRequests 都可以在没有用户交互甚至不知情的情况下工作。与"),n("a",Se,[e("跨站脚本"),s(t)]),e("不同 (XSS)，它利用用户对特定站点的信任，CSRF 利用站点对用户浏览器的信任。")]),ye,xe,we,Ce,n("ul",null,[n("li",null,[e("该"),n("a",Fe,[e("同步标记模式"),s(t)])]),n("li",null,[e("在会话 cookie 上指定"),n("a",Ae,[e("SameSite 属性"),s(t)])])]),n("blockquote",null,[n("p",null,[e("两种保护都要求"),n("a",Te,[e("安全方法必须是幂等的"),s(t)])])]),n("p",null,[e("为了使CSRF"),n("a",Re,[e("保护"),s(t)]),e("工作，应用程序必须确保"),n("a",He,[e("“安全”的 HTTP 方法是幂等的"),s(t)]),e("。这意味着，与HTTP方法请求"),Pe,e("，"),qe,e("，"),Oe,e("，和"),je,e("不应该改变应用程序的状态。")]),Ee,n("p",null,[e("防止 CSRF 攻击的主要和最全面的方法是使用"),n("a",Ie,[e("同步器令牌模式"),s(t)]),e("。该解决方案是为了确保每个 HTTP 请求除了我们的会话 cookie 之外，还必须在 HTTP 请求中存在一个安全的随机生成值，称为 CSRF 令牌。")]),De,Le,n("p",null,[e("我们可以放宽期望，为每个更新应用程序状态的 HTTP 请求只需要实际的 CSRF 令牌。为此，我们的应用程序必须确保"),n("a",Me,[e("安全的 HTTP 方法是幂等的"),s(t)]),e("。这提高了可用性，因为我们希望允许使用来自外部站点的链接链接到我们的网站。此外，我们不希望在 HTTP GET 中包含随机令牌，因为这会导致令牌泄漏。")]),We,n("p",null,[e("一种防止"),n("a",ze,[e("CSRF 攻击"),s(t)]),e("的新兴方法是在 cookie 上指定"),n("a",Be,[e("SameSite 属性"),s(t)]),e("。服务器可以"),Xe,e("在设置 cookie 时指定该属性，以指示当来自外部站点时不应发送 cookie。")]),n("blockquote",null,[n("p",null,[e("Spring Security 不直接控制会话 cookie 的创建，因此它不提供对 SameSite 属性的支持。 "),n("a",Ne,[e("Spring Session"),s(t)]),e("为"),Ue,e("基于 servlet 的应用程序中的属性提供支持。Spring Framework 的"),n("a",Je,[e("CookieWebSessionIdResolver"),s(t)]),e("为"),Ve,e("基于 WebFlux 的应用程序中的属性提供开箱即用的支持。")])]),Ge,Ye,Ke,n("ul",null,[n("li",null,[Qe,e("- 指定时，来自"),n("a",Ze,[e("同一站点的"),s(t)]),e("任何请求都将包含 cookie。否则，cookie 将不会包含在 HTTP 请求中。")]),n("li",null,[$e,e("- 当来自"),n("a",nt,[e("同一个站点"),s(t)]),e("或当请求来自顶级导航并且"),n("a",et,[e("方法是幂等的"),s(t)]),e("时，将发送指定的 cookie 。否则，cookie 将不会包含在 HTTP 请求中。")])]),tt,n("p",null,[e("在使用属性来防止 CSRF 攻击时，应该注意一些重要的"),n("a",st,[e("考虑因素"),s(t)]),at,e("。")]),n("p",null,[e("将该"),ot,e("属性设置为"),it,e("提供了更强的防御，但可能会使用户感到困惑。考虑一个用户保持登录到托管在"),n("a",rt,[e("https://social.example.com"),s(t)]),e("的社交媒体网站。用户在"),n("a",ct,[e("https://email.example.org"),s(t)]),e("收到一封电子邮件，其中包含指向社交媒体网站的链接。如果用户点击链接，他们理所当然地希望通过社交媒体网站的身份验证。但是，如果"),pt,e("属性是"),lt,e("cookie，则不会发送 cookie，因此不会对用户进行身份验证。")]),n("blockquote",null,[n("p",null,[e("我们可以"),ut,e("通过实施"),n("a",dt,[e("gh-7537"),s(t)]),e("来提高针对 CSRF 攻击的保护和可用性。")])]),n("p",null,[e("另一个明显的考虑是，为了"),ht,e("保护用户的属性，浏览器必须支持该"),kt,e("属性。大多数现代浏览器都"),n("a",vt,[e("支持 SameSite 属性"),s(t)]),e("。但是，仍在使用的旧浏览器可能不会。")]),mt,n("p",null,[e("允许将您的网站添加到框架可能是一个安全问题。例如，使用巧妙的 CSS 样式用户可能会被诱骗点击他们不想要的东西。例如，登录银行的用户可能会单击授予其他用户访问权限的按钮。这种攻击被称为"),n("a",gt,[e("点击劫持"),s(t)]),e("。")]),n("p",null,[e("有多种方法可以缓解点击劫持攻击。例如，为了保护旧浏览器免受点击劫持攻击，您可以使用"),n("a",_t,[e("断帧代码"),s(t)]),e("。虽然并不完美，但对于旧版浏览器来说，断帧代码是最好的选择。")]),n("p",null,[e("解决点击劫持的更现代方法是使用"),n("a",ft,[e("X-Frame-Options"),s(t)]),e("标头。")]),bt,n("p",null,[e("尝试从"),St,e("指令中声明的内容以外的其他来源加载脚本将被用户代理阻止。此外，如果在安全策略中声明了"),n("a",yt,[e("report-uri"),s(t)]),e("指令，则用户代理将向声明的 URL 报告违规。")]),xt,n("p",null,[e("Spring Security 的做法是使用"),n("a",wt,[e("Referrer Policy"),s(t)]),e(" header，它提供了不同的"),n("a",Ct,[e("策略"),s(t)]),e("：")]),Ft,n("p",null,[n("a",At,[e("功能策略"),s(t)]),e("是一种机制，允许 Web 开发人员有选择地启用、禁用和修改浏览器中某些 API 和 Web 功能的行为。")]),Tt,n("p",null,[n("a",Rt,[e("权限策略"),s(t)]),e("是一种机制，允许 Web 开发人员有选择地启用、禁用和修改浏览器中某些 API 和 Web 功能的行为。")]),Ht,n("p",null,[n("a",Pt,[e("清除站点数据"),s(t)]),e("是一种机制，当 HTTP 响应包含以下标头时，可以通过该机制"),n("a",qt,[e("删除"),s(t)]),e("任何浏览器端数据（cookie、本地存储等）：")]),Ot,n("p",null,[e("所有基于 HTTP 的通信，包括"),n("a",jt,[e("静态资源"),s(t)]),e("，都应该"),n("a",Et,[e("使用 TLS"),s(t)]),e("进行保护。")]),It,n("p",null,[e("Spring Security 提供对"),n("a",Dt,[e("Strict Transport Security 的"),s(t)]),e("支持并默认启用它。")]),Lt,n("p",null,[e("使用代理服务器时，确保正确的配置应用程序很重要。例如许多应用程序将有一个负载均衡器，通过将请求转发到位于"),n("a",Mt,[e("https://192.168.1:8080"),s(t)]),e("的应用程序服务器来响应对https://example.com/的请求。如果没有适当的配置，应用程序服务器将不知道负载均衡器的存在，并将请求视为客户端请求"),n("a",Wt,[e("https://192.168.1:8080"),s(t)]),e("。")]),n("p",null,[e("要解决此问题，您可以使用"),n("a",zt,[e("RFC 7239"),s(t)]),e("来指定正在使用负载平衡器。要使应用程序意识到这一点，您需要配置应用程序服务器以识别 X-Forwarded 标头。例如，Tomcat 使用"),n("a",Bt,[e("RemoteIpValve，"),s(t)]),e("而 Jetty 使用"),n("a",Xt,[e("ForwardedRequestCustomizer"),s(t)]),e("。或者，Spring 用户可以利用"),n("a",Nt,[e("ForwardedHeaderFilter"),s(t)]),e("。")]),Ut])}const Kt=o(p,[["render",Jt],["__file","SpringSecurity.html.vue"]]);export{Kt as default};
