import{_ as n,o as s,c as a,b as e}from"./app-5f8194d9.js";const t={},o=e(`<h4 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h4><p><code>ArrayList</code> 在读线程读取时如果有写线程在写数据的时候，基于 fast-fail 机制，会抛出 <code>ConcurrentModificationException</code>, 也就是说 <code>ArrayList</code> 并不是一个线程安全的容器，当然可以使用 <code>Vector</code> 或者使用 <code>Collections</code> 的静态方法将其包装成一个线程安全的类，但是这些方式都是采用关键字 <code>Synchronized</code> 对方法进行修饰，利用独占锁来保证线程安全。但是由于独占锁在同一时刻只有一个线程能获取到对象监视器，很显然这种方式效率不是太高。</p><p>回到业务场景中，有很多业务往往是<strong>读多写少</strong>的，比如系统配置的信息，除了在初始进行系统配置的时候需要写入数据，其他大部分时刻其他模块之后对系统信息只需要进行读取。如果在这种情况使用 <code>Vector</code> 或者使用 <code>Collections</code> 转换方式是不合理的，因为尽管多个读线程从同一个数据容器中读取数据，但是读线程对数据容器的数据不会发生修改。很自然而然的我们会联想到<code>ReenTrantReadWriteLock</code> 通过<strong>读写分离</strong>的思想使得读读之间不会阻塞，但是，如果仅仅是将list通过读写锁（<code>ReentrantReadWriteLock</code>）进行再一次封装的话，由于读写锁的特性，当写锁被写线程获取后，读写线程都会被阻塞</p><p>Doug Lea大师就为我们提供<code>CopyOnWriteArrayList</code>容器可以保证线程安全，保证读写之间在任何时候都不会被阻塞，<code>CopyOnWriteArrayList</code>也被广泛应用于很多业务场景之中，</p><h4 id="cow-的设计思想" tabindex="-1"><a class="header-anchor" href="#cow-的设计思想" aria-hidden="true">#</a> COW 的设计思想</h4><p>回到上面所说的，如果简单的使用读写锁的话，在写锁被获取之后，读写线程都被阻塞，只有当写锁被释放后读线程才有机会获取到锁从而读取到最新的数据，站在 <strong>读线程的角度看，即读线程任何时候都是获取到最新的数据，满足数据实时性。</strong> 既然我们说道要进行优化，必然有 <code>trade-off</code>，我们就可以 <strong>牺牲数据实时性满足数据的最终一致性即可。</strong> 而 <strong><code>CopyOnWriteArrayList</code>就是通过写时复制的思想来通过延时更新的策略来实现数据的最终一致性，并且能够保证读线程间不阻塞。</strong></p><p>COW通俗的理解是 <strong>当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后往新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。</strong> 对COW容器进行并发读的时候，不需要加锁，因为当前容器不会添加任何元素，所以COW容器也是 <strong>一种读写分离的思想，延时更新的策略是通过在写的时候针对的是不同的数据容器来实现的吗，放弃数据实时性达到数据的最终一致性。</strong></p><h4 id="copyonwritearraylist的实现原理" tabindex="-1"><a class="header-anchor" href="#copyonwritearraylist的实现原理" aria-hidden="true">#</a> <code>CopyOnWriteArrayList</code>的实现原理</h4><p>实际上<code>CopyOnWriteArrayList</code>内部维护的就是一个数组</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 数组，只能通过 getArray/setArray访问</span>
<span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>并且该数组引用是被 <code>volatile</code> 修饰，注意这里 <strong>仅仅修饰的是数组引用，</strong> volatile很重要的一条性质是它能够够保证可见性</p><h5 id="get方法实现原理" tabindex="-1"><a class="header-anchor" href="#get方法实现原理" aria-hidden="true">#</a> get方法实现原理</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * <span class="token punctuation">{</span><span class="token keyword">@inheritDoc</span><span class="token punctuation">}</span>
     *
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IndexOutOfBoundsException</span></span> <span class="token punctuation">{</span><span class="token keyword">@inheritDoc</span><span class="token punctuation">}</span>
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> array<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出来get方法实现非常简单，几乎就是一个“单线程”程序，没有对多线程添加任何的线程安全控制，也没有加锁也没有CAS操作等等，原因是，所有的读线程只是会读取数据容器中的数据，并不会进行修改。</p><h5 id="add方法实现原理" tabindex="-1"><a class="header-anchor" href="#add方法实现原理" aria-hidden="true">#</a> add方法实现原理</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>
        <span class="token comment">// 1.使用lock，保证写线程在同一时刻只有一个</span>
        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 2.获取旧数组引用</span>
            <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elements <span class="token operator">=</span> <span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> len <span class="token operator">=</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
            <span class="token comment">// 3.创建新数组,并将就数组的数据复制到新数组中</span>
            <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newElements <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 4.往新数组中添加新的数据</span>
            newElements<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>
            <span class="token comment">// 5.将旧数组引用指向新的数组</span>
            <span class="token function">setArray</span><span class="token punctuation">(</span>newElements<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意以下几点</p><ol><li>采用 <code>ReentrantLock</code>, 保证同一时刻只有一个写线程正在进行数组的复制，否则内存会有多份被复制的数据</li><li>数组被 <code>volatile</code> 修饰，因此将旧的数组引用指向新的数组，根据 <code>volatile</code> 的 <code>happens-before</code> 规则，写线程对数组引用的修改对读线程是可见的。</li><li>由于在写数据的时候，是在新的数组中插入数据的，从而保证读写是在两个不同的数据容器中进行操作。</li></ol><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h4><h5 id="cow-与-读写锁的区别" tabindex="-1"><a class="header-anchor" href="#cow-与-读写锁的区别" aria-hidden="true">#</a> COW 与 读写锁的区别</h5><p><strong>相同点</strong></p><ol><li>两者都是通过读写分离的思想实现的</li><li>读线程间是互不阻塞的</li></ol><p><strong>不同点</strong></p><p>​ 对于读线程而言，为了实现数据实时性，在读锁被获取后，读线程会等待或者当读锁被获取后，写线程等待，从而解决“脏读”的问题。而COW则完全放开了牺牲数据实时性而保证数据最终一致性，即读线程对数据的更新是延时感知的，因此读线程不会存在等待的情况</p><h5 id="为什么需要复制数组" tabindex="-1"><a class="header-anchor" href="#为什么需要复制数组" aria-hidden="true">#</a> 为什么需要复制数组?</h5><p>对volatile变量写happens-before读，读线程不是能够感知到volatile变量的变化的吗?</p><p>原因是，volatile 修饰的<strong>仅仅</strong>是<strong>数组引用</strong>，**数组中的元素的修改时不能保证可见性的。**因此COW采用的是新旧两个数据容器。</p><h5 id="cow的缺点" tabindex="-1"><a class="header-anchor" href="#cow的缺点" aria-hidden="true">#</a> COW的缺点</h5><ol><li><strong>内存占用问题：</strong> 因为在写操作时，内存中会存在两个对象数组；</li><li><strong>数据一致性问题：</strong> COW容器只能保证数据的最终一致性，不能保证数据的实时一致性。如果希望写入的数据马上能读到，请不要使用COW容器</li></ol>`,29),p=[o];function c(i,l){return s(),a("div",null,p)}const d=n(t,[["render",c],["__file","CopyOnWriteArrayList.html.vue"]]);export{d as default};
