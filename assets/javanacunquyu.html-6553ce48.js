import{_ as o,o as e,c as a,b as r}from"./app-5f8194d9.js";const t={},c=r('<h5 id="_1-1-程序计数器" tabindex="-1"><a class="header-anchor" href="#_1-1-程序计数器" aria-hidden="true">#</a> 1.1 程序计数器</h5><blockquote><p>程序计数器是一块较小的内存空间，可以看做是当前线程所执行的字节码的行号指示器。<strong>字节码解释器工作时通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等功能都需要依赖这个计数器来完成。</strong></p><p>另外，<strong>为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各个线程之间计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。</strong></p><p><strong>从上面的介绍中我们知道程序计数器主要有两个作用：</strong></p><ul><li>字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制，如：顺序执行、选择、循环、异常处理。</li><li>在多线程的情况下，程序计数器用于记录当前线程执行的位置，从而当线程被切换回来的时候能够知道该线程上次运行到哪儿了。</li></ul></blockquote><p>注意：程序计数器是唯一一个不会出现 <code>OutOfMemoryError</code>的内存区域，它的生命周期随着线程的创建而创建，随着线程的结束而死亡。</p><h5 id="_1-2-java虚拟机栈" tabindex="-1"><a class="header-anchor" href="#_1-2-java虚拟机栈" aria-hidden="true">#</a> 1.2 Java虚拟机栈</h5><blockquote><p><strong>与程序计数器一样，Java虚拟机栈也是线程私有的，它的生命周期和线程相同，描述的是 Java 方法执行的内存模型，没出方法调用的数据都是通过栈传递的。</strong></p><p><strong>Java内存可以粗糙的区分为堆内存（Heap）和栈内存（Stack），其中栈就是现在说的虚拟机栈，或者说是虚拟机栈中局部变量表部分。</strong>（实际上，Java虚拟机是由一个个栈帧组成，而每个栈帧中都拥有：局部变量表、操作数栈、动态链接、方法出口信息。）</p><p><strong>局部变量表主要存放了编译器可知的各种数据类型</strong>（boolean、byte、char、short、int、float、long、double）、对象引用（reference类型，它不同于对象本身，可能是一个指向对象起始地址的引用指针，也可能指向一个代表对象的句柄或其它与此对象相关的位置）。</p><p><strong>Java 虚拟机栈或出现两种异常： <code>StackOverFlowError</code> <code>OutOfMemoryError</code></strong></p><ul><li><strong><code>StackOverFlowError</code>：</strong> 若Java虚拟机栈的内存大小不允许动态扩展，那么当线程请求栈的深度超过当前Java虚拟机栈的最大深度的时候，就抛出<code>StackOverFlowError</code>异常。</li><li><strong><code>OutOfMemoryError</code>：</strong> 若 Java 虚拟机栈的内存大小允许动态扩展，且当线程请求栈时内存用完了，无法再动态扩展了，此时抛出<code>OutOfMemoryError</code>异常。</li></ul><p>Java 虚拟机栈也是线程私有的，每个线程都有各自的Java虚拟机栈，而且随着线程的创建而创建，随着线程的死亡而死亡。</p></blockquote><p>扩展：那么方法/函数如何调用？</p><blockquote><p>Java栈可用类比数据结构中栈，Java栈中保存的主要内容是栈帧，每一次函数调用都会有一个对应的栈帧被压入Java栈，每一个函数调用结束后，都会有一个栈帧被弹出。Java 方法有两种方式返回：return和抛出异常，不管哪种方式都会导致栈帧被弹出。</p></blockquote><h5 id="_1-3-本地方法栈" tabindex="-1"><a class="header-anchor" href="#_1-3-本地方法栈" aria-hidden="true">#</a> 1.3 本地方法栈</h5><blockquote><p>和虚拟机栈所发挥的作用非常相似，区别是：**虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法则为虚拟机使用到的 Native 方法服务。**在 <code>HotSpot</code>虚拟机中和 Java虚拟机栈合二为一。</p><p>本地方法被执行的时候，在本地方法栈也会创建一个栈帧，用于存放该本地方法的局部变量表、操作数栈、动态链接、出口信息</p><p>方法执行完毕后相应的栈帧也会出栈并释放内存空间，也会出现<code>StackOverFlowError</code>和 <code>OutOfMemoryError </code>两种异常。</p></blockquote><h5 id="_1-4-堆" tabindex="-1"><a class="header-anchor" href="#_1-4-堆" aria-hidden="true">#</a> 1.4 堆</h5><blockquote><p>Java 虚拟机所管理的内存中最大的一块，Java堆是所有线程共享的一块内存区域，在虚拟机启动时创建。<strong>此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数组都在这里分配内存.</strong></p><p>Java 堆是垃圾收集器管理的主要区域，因此也被称作**<code>GC</code>堆（Garbage Collected Heap）**.从垃圾回收的角度，由于现在收集器基本都采用分代垃圾收集算法，所以Java堆还可以细分为：新生代和老年代：再细致一点有：Eden空间、From Survivor、To Survivor空间等。<strong>进一步划分的目的是更好地回收内存，或者更快地分配内存。</strong></p></blockquote><p>eden区、<code>s0</code>区、<code>s1</code>区都属于新生代，<code>tentired</code> 区属于老年代。大部分情况，对象都会首先在 Eden 区域分配，在一次新生代垃圾回收后，如果对象还存活，则会进入<code> s0</code> 或者<code> s1</code>，并且对象的年龄还会加 1(Eden区-&gt;Survivor 区后对象的初始年龄变为1)，当它的年龄增加到一定程度（默认为15岁），就会被晋升到老年代中。对象晋升到老年代的年龄阈值，可以通过参数 <code>-XX:MaxTenuringThreshold</code> 来设置。</p><h5 id="_1-5-方法区" tabindex="-1"><a class="header-anchor" href="#_1-5-方法区" aria-hidden="true">#</a> 1.5 方法区</h5><blockquote><p><strong>方法区与 Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做 Non-Heap（非堆），目的应该是与 Java 堆区分开来。</strong></p><p><code>HotSpot</code>虚拟机中方法区也常被称为 <strong>“永久代”</strong>，本质上两者并不等价。仅仅是因为 <code>HotSpot </code>虚拟机设计团队用永久代来实现方法区而已，这样 <code>HotSpot</code> 虚拟机的垃圾收集器就可以像管理 Java 堆一样管理这部分内存了。但是这并不是一个好主意，因为这样更容易遇到内存溢出问题。</p><p><strong>相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入方法区后就“永久存在”了。</strong></p><p><code>JDK 1.8 </code>的时候，方法区被彻底移除了（<code>JDK1.7</code>就已经开始了），取而代之是元空间，元空间使用的是直接内存。</p><p>我们可以使用参数： <code>-XX:MetaspaceSize</code> 来指定元数据区的大小。与永久区很大的不同就是，如果不指定大小的话，随着更多类的创建，虚拟机会耗尽所有可用的系统内存。</p></blockquote><h5 id="_1-6-运行时常量池" tabindex="-1"><a class="header-anchor" href="#_1-6-运行时常量池" aria-hidden="true">#</a> 1.6 运行时常量池</h5><blockquote><p>运行时常量池是方法区的一部分。Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有常量池信息（用于存放编译期生成的各种字面量和符号引用）</p><p>既然运行时常量池时方法区的一部分，自然受到方法区内存的限制，当常量池无法再申请到内存时会抛出 <code>OutOfMemoryError</code> 异常。</p><p><strong><code>JDK1.7</code>及之后版本的<code> JVM</code> 已经将运行时常量池从方法区中移了出来，在 Java 堆（Heap）中开辟了一块区域存放运行时常量池。</strong></p></blockquote><h5 id="_1-7-直接内存" tabindex="-1"><a class="header-anchor" href="#_1-7-直接内存" aria-hidden="true">#</a> 1.7 直接内存</h5><blockquote><p><strong>直接内存并不是虚拟机运行时数据区的一部分，也不是虚拟机规范中定义的内存区域，但是这部分内存也被频繁地使用。而且也可能导致 <code>OutOfMemoryError</code> 异常出现。</strong></p><p><code>JDK1.4</code> 中新加入的 <code>**NIO</code>(New Input/Output) 类**，引入了一种基于<strong>通道（Channel）</strong> 与<strong>缓存区（Buffer）</strong> 的 I/O 方式，它可以直接使用 Native 函数库直接分配堆外内存，然后通过一个存储在 Java 堆中的 <code>DirectByteBuffer </code>对象作为这块内存的引用进行操作。这样就能在一些场景中显著提高性能，因为<strong>避免了在 Java 堆和 Native 堆之间来回复制数据</strong>。</p><p>本机直接内存的分配不会收到 Java 堆的限制，但是，既然是内存就会受到本机总内存大小以及处理器寻址空间的限制。</p></blockquote><p><strong>线程私有的</strong></p><ul><li>程序计数器</li><li>虚拟机栈</li><li>本地方法栈</li></ul><p><strong>线程共享的：</strong></p><ul><li>堆</li><li>方法区</li><li>直接内存（非运行时数据区的一部分）</li></ul>',22),d=[c];function n(s,p){return e(),a("div",null,d)}const i=o(t,[["render",n],["__file","javanacunquyu.html.vue"]]);export{i as default};
