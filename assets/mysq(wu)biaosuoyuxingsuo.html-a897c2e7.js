import{_ as s,o as n,c as a,b as e}from"./app-8a583c06.js";const p={},o=e(`<blockquote><p>前言：锁是计算机协调多个进程或线程并发访问某一资源的机制。在数据库中，除传统的计算机资源（如CPU、RAM、I/O等）的争用外，数据也是一种供许多用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据并发访问性能的一个重要因素。从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂。</p></blockquote><h5 id="_1、锁的分类" tabindex="-1"><a class="header-anchor" href="#_1、锁的分类" aria-hidden="true">#</a> 1、锁的分类</h5><p>从数据操作的类型来分：读锁(共享锁) 和 写锁(排他锁)</p><p>从数据操作粒度来分：表锁和行锁</p><h5 id="_2、表锁-偏读" tabindex="-1"><a class="header-anchor" href="#_2、表锁-偏读" aria-hidden="true">#</a> 2、表锁（偏读）</h5><blockquote><p>特点：偏向MyISAM存储引擎，开销小，加锁快，无死锁，锁定粒度大，发生锁冲突的概率最高，并发度低。下面通过案例来说明表锁的一些情况。</p></blockquote><ol><li><p>创建mylock表，并插入5条数据。注意数据引擎使用的是MyISAM。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> mylock<span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> mylock <span class="token punctuation">(</span>
    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>
    name <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> MyISAM <span class="token keyword">DEFAULT</span> <span class="token keyword">charset</span> <span class="token operator">=</span> utf8<span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> mylock <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> mylock <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> mylock <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> mylock <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> mylock <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;e&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>手动增加表锁命令</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">lock</span> <span class="token keyword">table</span> tablename1 <span class="token keyword">read</span><span class="token operator">/</span><span class="token keyword">write</span><span class="token punctuation">(</span><span class="token keyword">write</span><span class="token punctuation">)</span><span class="token punctuation">,</span>tablename2 <span class="token keyword">read</span><span class="token operator">/</span><span class="token keyword">write</span><span class="token punctuation">(</span><span class="token keyword">write</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>查看表是否被加锁</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 如果In_user显示不为0，则表示表被加锁</span>
<span class="token keyword">show</span> <span class="token keyword">open</span> <span class="token keyword">tables</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>释放表锁命令</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">unlock</span> <span class="token keyword">tables</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>读锁与写锁</p><blockquote><p>加读锁时，当前会话读正常，写报错；其他会话读正常，写阻塞</p><p>加写锁时，当前会话与读写都正常；其他会话读写都阻塞</p></blockquote></li></ol><h5 id="_3、行锁-偏写" tabindex="-1"><a class="header-anchor" href="#_3、行锁-偏写" aria-hidden="true">#</a> 3、行锁（偏写）</h5><blockquote><p>锁偏向InnoDB存储引擎，开销大，加锁慢，会出现死锁，锁定粒度小，发生锁冲突的概率低，但并发度高。</p></blockquote><ol><li><p>创建相关测试表tb_innodb_lock，注意数据库引擎为InnoDB。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> test_innodb_lock<span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test_innodb_lock <span class="token punctuation">(</span>
    a <span class="token keyword">INT</span> <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    b <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> 
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">charset</span> <span class="token operator">=</span> utf8<span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> test_innodb_lock <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> test_innodb_lock <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> test_innodb_lock <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> test_innodb_lock <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> test_innodb_lock <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">&#39;e&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>当我们操作的同一行数据，而由于InnoDB为行锁，在A会话未提交时，B会话只有阻塞等待。如果操作不同行，则不会出现阻塞情况</p></blockquote></li><li><p>索引失效会导致行锁升级为表锁</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># b为varchar类型，发生自动转换导致索引失效，从而使锁的级别从行锁升级为表锁</span>
<span class="token keyword">update</span> test_innodb_lock <span class="token keyword">set</span> a <span class="token operator">=</span> <span class="token number">110</span> <span class="token keyword">where</span> b <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>间隙锁的危害</p><p>3.1 间隙锁的定义</p><blockquote><p>当我们使用<strong>范围条件而不是相等条件</strong>检索数据时，并请求共享或排他锁时，InnoDB会给 <strong>符合条件</strong> 的已有数据记录的索引项加锁，对于键值在条件范围内但不存在的记录，叫作“间隙（GAP）”。InnoDB也会对这个“间隙”加锁，这种锁机制就是所谓的间隙锁。（Next-Key锁）</p></blockquote><p>3.2 间隙锁的危害</p><blockquote><p>因为在Query执行过程中通过范围查找的话，会锁定整个范围内的所有索引键值，即使这个索引不存在。间隙锁有一个比较致命的弱点，就是当锁定一个范围键值后，即使某些不存在的键值也会被无辜的锁定，而造成在锁定的时候无法插入锁定值范围内的任何数据。在某些场景下这个可能会对性能造成很大的危害。</p></blockquote></li><li><p>如何锁定某一行</p><blockquote><p>利用 for update</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test_innodb_lock <span class="token keyword">where</span> a <span class="token operator">=</span> <span class="token number">7</span> <span class="token keyword">for</span> <span class="token keyword">update</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>行锁分析</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">&#39;innodb_row_lock%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>Innodb_row_lock_current_waits：当前正在等待锁定的数量。</p><p>Innodb_row_lock_time：从系统启动到现在锁定的时长。</p><p>Innodb_row_lock_time_avg：每次等待锁所花平均时间。</p><p>Innodb_row_lock_time_max：从系统启动到现在锁等待最长的一次所花的时间。</p><p>Innodb_row_lock_waits：系统启动后到现在总共等待锁的次数。</p></blockquote></li><li><p>优化建议</p><p>6.1 尽可能让所有数据都通过索引来完成，避免无索引行升级为表锁。</p><p>6.2 合理设计索引，尽量缩小锁的范围。</p><p>6.3 尽可能使用较少的检索条件，避免间隙锁。</p><p>6.4 尽量控制事务大小，减少锁定资源量和时间长度。</p><p>6.5 尽可能降低事务隔离级别。</p></li></ol>`,10),t=[o];function l(c,i){return n(),a("div",null,t)}const u=s(p,[["render",l],["__file","mysq(wu)biaosuoyuxingsuo.html.vue"]]);export{u as default};
