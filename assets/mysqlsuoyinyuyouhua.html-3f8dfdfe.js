import{_ as n,o as a,c as s,b as e}from"./app-738c8638.js";const t={},i=e('<h4 id="索引是什么" tabindex="-1"><a class="header-anchor" href="#索引是什么" aria-hidden="true">#</a> 索引是什么</h4><p><code>Mysql</code>官方对索引的定义：索引（Index）是帮助<code>Mysql</code>高效获取数据的 <strong>数据结构</strong>。因此索引的本质就是 <strong>数据结构</strong>。索引的目的在于提高查询效率，可类比字典、书籍的目录等这种形式。</p><p>可简单理解为“<strong>排好序的快速查找数据结构</strong>”。在数据之外，数据库系统还维护者 **满足特定查找算法的数据结构，**这些数据结构以某种方式指向数据，这样就可以在这些数据结构上实现 **高级查找算法，**这种数据结构就是 <strong>索引。</strong></p><p>一般来说，索引本身也很大，不可能全部存储在内存中，因此索引往往以 <strong>索引文件</strong>的形式存储在磁盘上。</p><p>平常所说的索引，如果没有特别指明，都是B树索引。其中聚集索引、次要索引、覆盖索引、前缀索引、唯一索引默认都是用B树。</p><p>通过<code>show index from tablename</code>可以查看表的索引情况。</p><h4 id="索引的优缺点" tabindex="-1"><a class="header-anchor" href="#索引的优缺点" aria-hidden="true">#</a> 索引的优缺点</h4><p>优点</p><ol><li>类似大学图书馆的书目索引，提高数据的检索效率，降低数据库的IO成本。</li><li>通过索引列对数据进行排序，降低数据的排序成本，从而降低CPU的消耗。</li></ol><p>缺点</p><ol><li>索引实际上也是一张表，该表保存了主键与索引字段，并指向实体表的记录，所以索引列也要<strong>占用空间</strong>。</li><li>虽然索引大大提高了查询效率，但是<strong>降低</strong>了更新表的速度，如insert、update和delete操作。因为更新表时，<code>Mysql</code>不仅要保存数据，还要保存索引文件每次更新的索引列字段，并且在更新操作后，会<strong>更新</strong>相应字段索引的信息。</li><li>索引只是提高查询效率的一个因素，如果有大量的数据表，就需要花时间研究建立最优秀的索引或优化查询语句。</li></ol><h4 id="索引分类" tabindex="-1"><a class="header-anchor" href="#索引分类" aria-hidden="true">#</a> 索引分类</h4><ol><li>单值索引：一个索引只包含单个列，一个表可以有多个单值索引</li><li>唯一索引：索引列的值必须唯一，但允许有空值，主键就是唯一索引</li><li>复合索引：一个索引包含多个列</li></ol><p>索引的结构：</p><p>BTREE索引；Hash索引；Full-Text索引；R-Tree索引。</p><h4 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法" aria-hidden="true">#</a> 基本语法</h4><h5 id="创建索引" tabindex="-1"><a class="header-anchor" href="#创建索引" aria-hidden="true">#</a> 创建索引</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token punctuation">[</span><span class="token keyword">unique</span><span class="token punctuation">]</span> <span class="token keyword">index</span> indexname <span class="token keyword">on</span> tablename<span class="token punctuation">(</span>columnname<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">alter</span> <span class="token keyword">table</span> tablename <span class="token keyword">add</span> <span class="token keyword">index</span> indexname <span class="token punctuation">(</span>columnname<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注：如果是char、varchar类型的字段，length可以小于字段实际长度；如果是blob、text类型，必须指定length。</p><h5 id="删除索引" tabindex="-1"><a class="header-anchor" href="#删除索引" aria-hidden="true">#</a> 删除索引</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">drop</span> <span class="token keyword">index</span> indexname <span class="token keyword">on</span> tablename<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="查看索引" tabindex="-1"><a class="header-anchor" href="#查看索引" aria-hidden="true">#</a> 查看索引</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> <span class="token keyword">index</span> <span class="token keyword">from</span> tablename<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="其他创建索引的方式" tabindex="-1"><a class="header-anchor" href="#其他创建索引的方式" aria-hidden="true">#</a> 其他创建索引的方式</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 添加主键索引</span>\n<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>table_name<span class="token punctuation">`</span></span> <span class="token keyword">ADD</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>column<span class="token punctuation">`</span></span><span class="token punctuation">)</span> \n\n<span class="token comment"># 添加唯一索引</span>\n<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>table_name<span class="token punctuation">`</span></span> <span class="token keyword">ADD</span> <span class="token keyword">UNIQUE</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>column<span class="token punctuation">`</span></span><span class="token punctuation">)</span>\n\n<span class="token comment"># 添加全文索引</span>\n<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>table_name<span class="token punctuation">`</span></span> <span class="token keyword">ADD</span> FULLTEXT <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>column<span class="token punctuation">`</span></span><span class="token punctuation">)</span>\n\n<span class="token comment"># 添加普通索引</span>\n<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>table_name<span class="token punctuation">`</span></span> <span class="token keyword">ADD</span> <span class="token keyword">INDEX</span> index_name <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>column<span class="token punctuation">`</span></span><span class="token punctuation">)</span>\n\n<span class="token comment"># 添加组合索引</span>\n<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>table_name<span class="token punctuation">`</span></span> <span class="token keyword">ADD</span> <span class="token keyword">INDEX</span> index_name <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>column1<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>column2<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>column3<span class="token punctuation">`</span></span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="建立索引与否的具体情况" tabindex="-1"><a class="header-anchor" href="#建立索引与否的具体情况" aria-hidden="true">#</a> 建立索引与否的具体情况</h4><h5 id="需建立索引的情况" tabindex="-1"><a class="header-anchor" href="#需建立索引的情况" aria-hidden="true">#</a> 需建立索引的情况</h5><ol><li>主键自动建立唯一索引</li><li>频繁作为查询条件的字段</li><li>查询中与其他表关联的字段，外键关系建立索引</li><li>高并发下趋向创建组合索引</li><li>查询中排序的字段，排序字段若通过索引去访问将大大提高排序速度</li><li>查询中通过或分组的字段</li></ol><h5 id="不需要建立索引的情况" tabindex="-1"><a class="header-anchor" href="#不需要建立索引的情况" aria-hidden="true">#</a> 不需要建立索引的情况</h5><ol><li>表记录太少</li><li>经常增删改的表</li><li>数据重复且平均分配的字段，如国籍、性别，不适合创建索引</li></ol><h4 id="索引优化" tabindex="-1"><a class="header-anchor" href="#索引优化" aria-hidden="true">#</a> 索引优化</h4><p>索引优化的目的主要是让索引不失效</p><h5 id="_1-最佳左前缀法则" tabindex="-1"><a class="header-anchor" href="#_1-最佳左前缀法则" aria-hidden="true">#</a> 1.最佳左前缀法则</h5><p>在创建了多列索引的情况下，查询从索引的 <strong>最左前列开始且不能跳过索引中的列</strong>。</p><p>最佳左前缀法则就是说如果创建了多个索引，在使用索引时要按照创建索引的顺序来使用，不能缺少或跳过。（如果使用跳过开头则索引失效、如果跳过中间则后面索引失效）</p><blockquote><p>通俗理解：“带头大哥不能死，中间兄弟不能断”。要点：“头不能掉”。</p></blockquote><h5 id="_2-不要在索引列上做任何操作" tabindex="-1"><a class="header-anchor" href="#_2-不要在索引列上做任何操作" aria-hidden="true">#</a> 2.不要在索引列上做任何操作</h5><p>在索引列上做任何操作（计算、函数、（自动or手动）类型转换），会导致索引失效从而转向全表扫描。</p><h5 id="_3-范围右边索引列全失效" tabindex="-1"><a class="header-anchor" href="#_3-范围右边索引列全失效" aria-hidden="true">#</a> 3.范围右边索引列全失效</h5><p>存储引擎不能使用索引中范围右边的列</p><p>当使用 age &gt; 27 这种范围时，会导致范围右边的索引列失效</p><h5 id="_4-尽量使用覆盖索引" tabindex="-1"><a class="header-anchor" href="#_4-尽量使用覆盖索引" aria-hidden="true">#</a> 4.尽量使用覆盖索引</h5><p>尽量使用覆盖索引（查询列和索引列尽量一致，通俗说就是对A、B列创建了索引，然后查询中也使用A、B列），减少select *的使用。</p><p>explain执行计划显示：Extra从Null变成了Using index，提高检索效率。</p><h5 id="_5-使用不等于-或-会使type-range" tabindex="-1"><a class="header-anchor" href="#_5-使用不等于-或-会使type-range" aria-hidden="true">#</a> 5.使用不等于（!= 或 &lt;&gt;）会使Type = range</h5><p>使用 != 会使type=range，Extra Using index condition</p><h5 id="_6-is-null-或-is-not-null-也无法使用索引" tabindex="-1"><a class="header-anchor" href="#_6-is-null-或-is-not-null-也无法使用索引" aria-hidden="true">#</a> 6.is null 或 is not null 也无法使用索引</h5><p>在使用is null的时候，索引完全失效，使用is not null的时候，type=ALL全表扫描，key=Null索引失效。</p><h5 id="_7-like通配符以-开头会使索引失效" tabindex="-1"><a class="header-anchor" href="#_7-like通配符以-开头会使索引失效" aria-hidden="true">#</a> 7.like通配符以 % 开头会使索引失效</h5><p>like的%位置不同，所产生的效果不一样，当%出现在左边的时候，type=ALL，key=Null（全表扫描，索引失效），当%出现在右边的时候，type=range，索引未失效。</p><blockquote><p>口诀：like百分加右边。</p><p>但是在实际生产环境中，%仅出现在右边可能不能够解决我们的问题，所以解决%出现在左边索引失效的方法：使用覆盖索引。</p></blockquote><h5 id="_8-字符串不加单引号导致索引失效" tabindex="-1"><a class="header-anchor" href="#_8-字符串不加单引号导致索引失效" aria-hidden="true">#</a> 8.字符串不加单引号导致索引失效</h5><p>varchar类型的字段，在查询的时候不加单引号(进行了类型转换)导致索引失效，转向全表扫描</p><h5 id="_9-少用or-用or连接会使type-range" tabindex="-1"><a class="header-anchor" href="#_9-少用or-用or连接会使type-range" aria-hidden="true">#</a> 9.少用or，用or连接会使Type = range</h5><p>在使用or连接的时候会使type = range、Extra = Using where; Using index</p><h4 id="索引分析结论" tabindex="-1"><a class="header-anchor" href="#索引分析结论" aria-hidden="true">#</a> 索引分析结论</h4><p>case 1、</p><blockquote><p>在执行常量等值查询时，改变索引列的顺序并不会更改explain的执行结果，因为mysql底层优化器会进行优化，但是推荐按照索引顺序列编写sql语句。</p></blockquote><p>case 2、</p><blockquote><p>范围右边索引列失效，但是范围当前位置的索引是有效的</p><p>范围右边索引列失效，是有顺序的：c1,c2,c3,c4，如果c3有范围，则c4失效；如果c4有范围，则没有失效的索引列，从而会使用全部索引。</p><p>如果在c1处使用范围，则type=ALL，key=Null，索引失效，全表扫描，这里违背了最佳左前缀法则，带头大哥已死，因为c1主要用于范围，而不是查询。解决方式使用覆盖索引。</p><p>结论：在最佳左前缀法则中，如果最左前列（带头大哥）的索引失效，则后面的索引都失效。</p></blockquote><p>总结：</p><p>①最佳左前缀法则。</p><p>1.在等值查询时，更改索引列顺序，并不会影响explain的执行结果，因为mysql底层会进行优化。</p><p>2.在使用order by时，注意索引顺序、常量，以及可能会导致Using filesort的情况。</p><p>②group by容易产生Using temporary。</p><h4 id="orderby-优化" tabindex="-1"><a class="header-anchor" href="#orderby-优化" aria-hidden="true">#</a> orderBy 优化</h4><p>在使用order by时，经常出现<strong>Using filesort</strong>，</p><p>因此对于此类sql语句需尽力优化，使其尽量使用<strong>Using index</strong>。</p><p><strong>总结：</strong></p><ol><li><p>MySQL支持两种方式的排序filesort和index，Using index是指MySQL扫描索引本身完成排序。index效率高，filesort效率低。</p></li><li><p>order by 满足两种情况会使用 Using index</p><ul><li>order by语句使用索引最左前列。</li><li>使用where子句与order by子句条件列组合满足索引最左前列。</li></ul></li><li><p>尽量在索引列上完成排序，遵循索引建立（索引创建的顺序）时的最佳左前缀法则。</p></li><li><p>如果order by的条件不在索引列上，就会产生Using filesort。</p><blockquote><p>filesort有两种排序算法：双路排序和单路排序。</p></blockquote></li><li><p>提升order by速度的方式：</p><ul><li>在使用order by时，不要用select *，只查询所需的字段。因为当查询字段过多时，会导致sort_buffer不够，从而使用多路排序或进行多次I/O操作</li><li>尝试提高sort_buffer_size</li><li>尝试提高max_length_for_sort_data</li></ul></li><li><p>group by与order by很类似，其实质是先排序后分组，遵照索引创建顺序的最佳左前缀法则。当无法使用索引列的时候，也要对sort_buffer_size和max_length_for_sort_data参数进行调整。注意where高于having，能写在where中的限定条件就不要去having限定了</p></li></ol>',70),p=[i];function l(o,r){return a(),s("div",null,p)}const d=n(t,[["render",l],["__file","mysqlsuoyinyuyouhua.html.vue"]]);export{d as default};
