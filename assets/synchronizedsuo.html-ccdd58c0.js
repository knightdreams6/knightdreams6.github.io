import{_ as n,o as s,c as a,b as e}from"./app-d8497c2f.js";const o={},c=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Phone</span><span class="token punctuation">{</span>
    <span class="token comment">// 非静态同步方法</span>
    <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sendEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    
    <span class="token comment">// 静态同步方法</span>
    <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sendSMS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    
    <span class="token comment">// 普通方法</span>
    <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>当一个线程试图访问同步代码块或方法时，它必须先得到锁，退出或抛出异常时释放锁。</strong></p><p>什么是锁？</p><ul><li>对于非静态同步方法，锁是 <code>this</code>, 当前实例【对象锁】</li><li>对于同步代码块，锁是 <code>synchronized()</code>括号里面的对象</li><li>对于静态同步方法，锁是 <code>Class</code>对象【全局锁】</li></ul><p><strong>总结：</strong></p><ol><li>对于非静态同步方法，当有一个非静态同步方法在执行中，就得到了当前的对象锁，其它的非静态同步方法被调用时就必须等待其释放锁（执行完毕或抛出异常）后才可执行。【对象锁只锁当前实例，如果多个实例则互不影响】</li><li>对于静态同步方法，当有一个静态同步方法在执行中，就得到了当前的全局锁，其它的静态同步方法被调用就必须等待其释放锁（执行完毕或抛出异常）后才可执行。【全局锁锁的是 Class对象，多个实例也只有一个Class对象，也就是说多个实例会互相影响】</li><li>普通方法执行不需要获取锁，不会与其竞争锁</li></ol>`,6),t=[c];function l(i,p){return s(),a("div",null,t)}const u=n(o,[["render",l],["__file","synchronizedsuo.html.vue"]]);export{u as default};
