import{_ as e,o as r,c as o,a as t}from"./app-c430818d.js";const n={},s=t('<h5 id="autowired" tabindex="-1"><a class="header-anchor" href="#autowired" aria-hidden="true">#</a> @Autowired</h5><blockquote><p>由Spring提供，<strong>默认只按照类型注入</strong>，默认情况下必须要求依赖对象存在，如果要<strong>允许null值</strong>，则可以设置其<strong>require属性</strong>为<strong>false</strong>。</p><p>如果想使用<strong>名称装配</strong>可以结合**@Qualifier注解**进行使用</p></blockquote><h5 id="resource" tabindex="-1"><a class="header-anchor" href="#resource" aria-hidden="true">#</a> @Resource</h5><blockquote><p>由J2EE提供，<strong>默认按照名称注入</strong>，名称可以通过 <strong>name属性</strong>指定</p><p>如果没有指定name 属性，当注解写到<strong>字段</strong>上，<strong>默认取字段名</strong>进行名称查找；如果注解写到<strong>setter</strong>方法上默认取属性名进行注入。</p><p>当<strong>找不到与名称匹配的bean时</strong>才<strong>按照类型进行注入</strong>。</p><p>需要注意的是，如果name属性一旦指定，就只会按照名称进行装配。若指定<strong>type属性</strong>，则找类型匹配的bean进行注入，找不到抛出异常</p></blockquote>',4),a=[s];function c(u,i){return r(),o("div",null,a)}const d=e(n,[["render",c],["__file","ResourceyuAutowiredzhujiedequbie.html.vue"]]);export{d as default};
