import{_ as n,o as a,c as s,b as e}from"./app-c5e7af21.js";const t={},o=e(`<p>Mybatis执行一条Sql语句的流程</p><p>Creating a new SqlSession</p><p>SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@564a1de4] was not registered for synchronization because synchronization is not active</p><p>o.s.jdbc.datasource.DataSourceUtils - Fetching JDBC Connection from DataSource</p><p>c.b.d.d.DynamicRoutingDataSource - dynamic-datasource switch to the datasource named [slave]</p><p>o.m.s.t.SpringManagedTransaction - JDBC Connection [HikariProxyConnection@2147330770 wrapping com.mysql.cj.jdbc.ConnectionImpl@6f03dead] will not be managed by Spring</p><p>org.mybatis.spring.SqlSessionUtils - Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@564a1de4]</p><h5 id="_1、通过sqlsessionfactory创建sqlsession" tabindex="-1"><a class="header-anchor" href="#_1、通过sqlsessionfactory创建sqlsession" aria-hidden="true">#</a> 1、通过SqlSessionFactory创建SqlSession</h5><blockquote><p>SqlSession 是 MyBatis 暴露给外部使用的统一接口层，所有和数据库打交道的操作都通过 SqlSession 这层。</p></blockquote><p><code>SqlSession</code>对象创建的流程：</p><ol><li>通过<code>SqlSessionFactoryBuilder</code>解析配置构建<code>Configuration</code>然后通过构造方法创建<code>DefaultSqlSessionFactory</code></li><li>通过<code>DefaultSqlSessionFactory</code>的<code>openSession()</code>方法调用<code>openSessionFromDataSource()</code>方法创建<code>DefaultSqlSession</code></li></ol><h5 id="_2、mapperproxy" tabindex="-1"><a class="header-anchor" href="#_2、mapperproxy" aria-hidden="true">#</a> 2、MapperProxy</h5><blockquote><p>通过 SqlSession 获取 Mapper对象流程</p></blockquote><ol><li>通过<code>DefaultSession</code>获取<code>Configuration</code></li><li>通过<code>Configuration</code>的<code>getMapper()</code>获取<code>MapperRegistry</code></li><li>通过<code>MapperRegister</code>的<code>getMapper()</code>方法调用<code>mapperProxyFactory.newInstance(sqlSession)</code>获取最终的Mpper</li><li>mapper执行sql的底层其实是MapperProxy对象，通过动态代理获取该对象，执行查询操作</li></ol><blockquote><p>MapperRegistry 是 Configuration 的一个属性，MapperRegistry 缓存了 MapperProxyFactory 的 Map 集合，也就是说在解析完配置文件后， knownMappers 集合数据已经在 Configuration 对象中存在了。</p></blockquote><h5 id="_3、exector" tabindex="-1"><a class="header-anchor" href="#_3、exector" aria-hidden="true">#</a> 3、Exector</h5><blockquote><p>SqlSession 中的 JDBC 操作部分最终都会委派给 Exector 实现。</p><p>根据 Exector 执行的时序图，可以抽象出的主要类是：SqlSession、Exector、StatementHandler、ParameterHandler、ResultSetHandler。</p><p>StatementHandler 接口是 MyBatis 的核心接口之一，它是 Exector 接口实现的基础。StatementHandler 的主要功能很多，例如创建 Statement 对象，为 SQL 语句绑定实参，执行 SQL 语句，将结果集映射成结果对象。</p><p>StatementHandler 类中包含了 ParameterHandler 和 ResultSetHandler 的属性。ParameterHandler 的主要功能是为 SQL 语句绑定实参，也就是使用传入的参数替换 SQL 语句中的“?”占位符。ResultSetHandler 的主要功能是将结果集映射成结果对象。</p></blockquote><h5 id="为什么-mapper-接口可以调用方法" tabindex="-1"><a class="header-anchor" href="#为什么-mapper-接口可以调用方法" aria-hidden="true">#</a> 为什么 Mapper 接口可以调用方法？</h5><blockquote><p>Mapper接口的真实对象是 <code>org.apache.ibatis.binding.MapperProxy</code></p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapperProxy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> 		<span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">isDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>privateLookupInMethod <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token function">invokeDefaultMethodJava8</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token function">invokeDefaultMethodJava9</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token class-name">ExceptionUtil</span><span class="token punctuation">.</span><span class="token function">unwrapThrowable</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">final</span> <span class="token class-name">MapperMethod</span> mapperMethod <span class="token operator">=</span> <span class="token function">cachedMapperMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> mapperMethod<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上面的源码内容，可以得出如下结论：</p><ul><li>Mapper的真实对象是 MapperProxy</li><li>MapperProxy 继承 InvocationHandler，实现 invoke 方法；</li><li>MapperProxyFactory 的 newInstance 方法，通过 JDK 动态代理的方式创建了一个 MapperProxy 的代理类；</li></ul><p>MyBatis 的 Mapper 是通过动态代理实现的，调用 Mapper 的任何方法都会执行 MapperProxy 的 invoke 方法。</p><p>MyBatis 使用的动态代理和通常的动态代理有点区别，没有实现类，只有接口。</p>`,24),p=[o];function c(i,l){return a(),s("div",null,p)}const r=n(t,[["render",c],["__file","MybatiszhixingyitiaoSqlyujudeliucheng.html.vue"]]);export{r as default};
