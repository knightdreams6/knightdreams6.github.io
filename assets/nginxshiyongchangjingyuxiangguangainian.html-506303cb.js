import{_ as e,o,c,b as d}from"./app-03a88084.js";const n={},i=d(`<h4 id="_1、使用场景" tabindex="-1"><a class="header-anchor" href="#_1、使用场景" aria-hidden="true">#</a> 1、使用场景</h4><ol><li>静态资源服务，通过本地文件系统提供服务</li><li>反向代理服务，延伸出包括缓存、负载均衡等</li><li><code>API</code>服务，<code>OpenResty</code>等</li></ol><h4 id="_2、相关概念" tabindex="-1"><a class="header-anchor" href="#_2、相关概念" aria-hidden="true">#</a> 2、相关概念</h4><h5 id="_2-1-简单请求与非简单请求" tabindex="-1"><a class="header-anchor" href="#_2-1-简单请求与非简单请求" aria-hidden="true">#</a> 2.1 简单请求与非简单请求</h5><ol><li>请求方法是 <code>HEAD</code>、<code>GET</code>、<code>POST</code> 三种之一；</li><li>HTTP 头信息不超过右边着几个字段：<code>Accept</code>、<code>Accept-Language</code>、<code>Content-Language</code>、<code>Last-Event-ID</code>、<code>Content-Type</code> 只限于三个值 <code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code>、<code>text/plain</code>；</li></ol><p>凡是不同时满足这两个条件的，都属于非简单请求。</p><blockquote><p>浏览器处理简单请求和非简单请求的方式不一样：</p></blockquote><p><strong>简单请求</strong></p><blockquote><p>对于简单需求，浏览器会在头信息中增加 <code>Origin</code> 字段后直接发出，<code>Origin</code> 字段用来说明，本次请求来自的哪个源（协议+域名+端口）</p><p>如果服务器发现 <code>Origin</code> 指定的源不在许可范围内，服务器会返回一个正常的 HTTP 回应，浏览器取到回应之后发现回应的头信息中没有包含 <code>Access-Control-Allow-Origin</code> 字段，就抛出一个错误给 <code>XHR</code> 的 <code>error</code> 事件；</p><p>如果服务器发现 <code>Origin</code> 指定的域名在许可范围内，服务器返回的响应会多出几个 <code>Access-Control-</code> 开头的头信息字段。</p></blockquote><p><strong>非简单请求</strong></p><blockquote><p>非简单请求是那种对服务器有特殊要求的请求，比如请求方法是 <code>PUT</code> 或 <code>DELETE</code>，或 <code>Content-Type</code> 值为 <code>application/json</code>。浏览器会在正式通信之前，发送一次 HTTP 预检 <code>OPTIONS</code>请求，先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些 HTTP 请求方法和头信息字段。只有得到肯定答复，浏览器才会发出正式的 <code>XHR</code> 请求，否则报错。</p></blockquote><h5 id="_2-2-跨域" tabindex="-1"><a class="header-anchor" href="#_2-2-跨域" aria-hidden="true">#</a> 2.2 跨域</h5><blockquote><p>在浏览器上当前访问的网站向另一个网站发送请求获取数据的过程就是<strong>跨域请求</strong>。</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 同源的例子
http://example.com/app1/index.html  # 只是路径不同
http://example.com/app2/index.html

http://Example.com:80  # 只是大小写差异
http://example.com

# 不同源的例子
http://example.com/app1   # 协议不同
https://example.com/app2

http://example.com        # host 不同
http://www.example.com
http://myapp.example.com

http://example.com        # 端口不同
http://example.com:8080
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-3-正向代理与反向代理" tabindex="-1"><a class="header-anchor" href="#_2-3-正向代理与反向代理" aria-hidden="true">#</a> 2.3 正向代理与反向代理</h5><p>简单的说，一般给客户端做代理的都是正向代理，给服务器做代理的就是反向代理。</p><blockquote><p>正向代理对于用户是可见的，反向代理对于与用户是不可见的</p></blockquote><h5 id="_2-4-负载均衡" tabindex="-1"><a class="header-anchor" href="#_2-4-负载均衡" aria-hidden="true">#</a> 2.4 负载均衡</h5><blockquote><p>单个服务器解决不了的问题，可以使用多个服务器，然后将请求分发到各个服务器上，将负载分发到不同的服务器，这就是<strong>负载均衡</strong>，核心是「分摊压力」。Nginx 实现负载均衡，一般来说指的是将请求转发给服务器集群。</p></blockquote><h5 id="_2-5-动静分离" tabindex="-1"><a class="header-anchor" href="#_2-5-动静分离" aria-hidden="true">#</a> 2.5 动静分离</h5><blockquote><p>为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度，降低原来单个服务器的压力。</p></blockquote>`,21),a=[i];function t(l,r){return o(),c("div",null,a)}const p=e(n,[["render",t],["__file","nginxshiyongchangjingyuxiangguangainian.html.vue"]]);export{p as default};
