import{_ as a,o as e,c as i,b as r}from"./app-bcc3a327.js";const o={},t=r('<blockquote><p>官方文档： https://seata.io/zh-cn/docs/overview/what-is-seata.html</p><p>仓库地址： https://github.com/seata/seata</p><p>示例地址： https://github.com/seata/seata-samples</p></blockquote><h4 id="什么是seata" tabindex="-1"><a class="header-anchor" href="#什么是seata" aria-hidden="true">#</a> 什么是<code>seata</code>？</h4><p><code>seata</code>是一种高性能、易用的<strong>微服务</strong>架构<strong>分布式事务解决方案。</strong><code>Seata</code>将为用户提供了 AT、TCC、SAGA 和 XA 事务模式，为用户打造一站式的分布式解决方案。</p><h4 id="微服务中的分布式事务问题" tabindex="-1"><a class="header-anchor" href="#微服务中的分布式事务问题" aria-hidden="true">#</a> 微服务中的分布式事务问题</h4><p>传统的单体应用程序使用单一的本地数据源，本地事务会保证数据的一致性。</p><p>微服务架构发生了变化，每个服务内的数据一致性自然由本地事务保证，但整个业务逻辑范围涉及到多个数据源则无法保证数据的一致性</p><h4 id="seata是怎么做的" tabindex="-1"><a class="header-anchor" href="#seata是怎么做的" aria-hidden="true">#</a> <code>seata</code>是怎么做的</h4><p><code>seata</code> 只是上面提到的问题的一种解决方案</p><p>首先如何定义 <strong>分布式事务？</strong></p><blockquote><p>我们说，<strong>分布式事务</strong>是由一批 <strong>分支事务</strong> 组成的 <strong>全局事务</strong>，通常 <strong>分支事务</strong>只是 <strong>本地事务</strong></p></blockquote><h5 id="seata-框架中的三个角色" tabindex="-1"><a class="header-anchor" href="#seata-框架中的三个角色" aria-hidden="true">#</a> <code>seata</code> 框架中的三个角色</h5><ul><li><p>TC（Transaction Coordinator）事务协调器：维护全局和分支事务的状态，驱动全局提交或回滚。</p></li><li><p>TM（Transaction Manager）事务管理器：定义全局事务的范围：开始一个全局事务，提交或回滚一个全局事务。</p></li><li><p>RM（Resource Manager）资源管理器：管理分支事务处理的资源，与TC通信注册分支事务和报告分支事务状态，并驱动分支事务提交或回滚</p></li></ul><h5 id="seata-托管分布式事务的典型生命周期" tabindex="-1"><a class="header-anchor" href="#seata-托管分布式事务的典型生命周期" aria-hidden="true">#</a> <code>seata</code> 托管分布式事务的典型生命周期</h5><ol><li>TM 要求 TC 开始新的全局事务。TC 生成代表全局事务的 XID</li><li>XID 通过微服务的调用链传播</li><li>RM 将本地事务作为 XID对应的全局事务的一个分支注册到TC</li><li>TM 请求 TC 提交或回滚 XID 对应的全局事务</li><li>TC 驱动 XID对应全局事务下的所有分支事务完成分支提交或回滚</li></ol><h4 id="at模式" tabindex="-1"><a class="header-anchor" href="#at模式" aria-hidden="true">#</a> <code>AT</code>模式</h4><h5 id="前提" tabindex="-1"><a class="header-anchor" href="#前提" aria-hidden="true">#</a> 前提</h5><ul><li>基于支持本地 ACID 事务的关系型数据库</li><li>Java 应用，通过 JDBC 访问数据库</li></ul><h5 id="整体机制" tabindex="-1"><a class="header-anchor" href="#整体机制" aria-hidden="true">#</a> 整体机制</h5><p>两阶段提交协议的演变</p><ul><li>一阶段： 业务数据和回滚日志记录在同一个本地事务中提交，释放本地锁和连接资源</li><li>二阶段： <ul><li>提交异步化，非常快速的完成</li><li>回滚通过一阶段的回滚日志进行反向补偿</li></ul></li></ul><h5 id="写隔离" tabindex="-1"><a class="header-anchor" href="#写隔离" aria-hidden="true">#</a> 写隔离</h5><ul><li>一阶段本地事务提交前，需确保先拿到 <strong>全局锁</strong></li><li>拿不到 <strong>全局锁</strong>，不能提交本地事务</li><li>拿 <strong>全局锁</strong> 的尝试被限制在一定范围内，超出范围将放弃，并回滚本地事务，释放本地锁</li></ul><h5 id="读隔离" tabindex="-1"><a class="header-anchor" href="#读隔离" aria-hidden="true">#</a> 读隔离</h5><p>在数据库本地事务隔离级别 <strong>读已提交（Read Committed）</strong> 或以上的基础上，<code>Seata</code>（AT模式）的默认全局隔离级别是 <strong>读未提交（Read Uncommitted）</strong></p><p>如果应用在特定场景下，必须要求全局 **读已提交，**默认<code>Seata</code>的方式是通过 <code>SELECT FOR UPDATE</code>语句的代理。</p><p><code>SELECT FOR UPDATE</code> 语句的执行会申请 <strong>全局锁</strong>，如果 <strong>全局锁</strong> 被其他事务持有，则释放本地锁（回滚 <code>SELECT FOR UPDATE</code> 语句的本地执行）并重试。如果这个过程中，查询是被 block 住的，知道 <strong>全局锁</strong> 拿到，即读取的相关数据是 <strong>已提交</strong>的，才返回</p><p>出于总体性能上的考虑，<code>Seata</code> 目前的方案并没有对所有 SELECT 语句都进行代理，仅针对 FOR UPDATE 的 SELECT 语句。</p><h4 id="tcc模式" tabindex="-1"><a class="header-anchor" href="#tcc模式" aria-hidden="true">#</a> <code>TCC</code>模式</h4><p>一个分布式的全局事务，整体是 <strong>两阶段提交</strong>的模型。全局事务是由若干分支事务组成的，分支事务要满足 <strong>两阶段提交</strong>的模型要求，即需要每个分支事务都具备自己的：</p><ul><li>一阶段 prepare 行为</li><li>二阶段 commit 或 rollback行为</li></ul><p>根据两阶段行为模式的不同，我们将分支事务划分为 <code>Automatic (Branch) Transaction Mode</code> 和 <code>TCC (Branch) Transaction Mode</code></p><p>AT 模式基于 <strong>支持本地ACID事务</strong> 的关系型数据库：</p><ul><li>一阶段 prepare 行为：在本地事务中，一并提交业务数据更新和相应回滚日志记录</li><li>二阶段 commit 行为：马上成功结束， <strong>自动</strong> 异步批量清理回滚日志</li><li>二阶段 rollback 行为：通过回滚日志，<strong>自动</strong> 生成补偿操作，完成数据回滚</li></ul><p>相应的<code>TCC</code> 模式，不依赖于底层数据资源的事务支持：</p><ul><li>一阶段 prepare 行为：调用 <strong>自定义</strong> 的 prepare 逻辑。</li><li>二阶段 commit 行为：调用 <strong>自定义</strong> 的 commit 逻辑。</li><li>二阶段 rollback 行为：调用 <strong>自定义</strong> 的 rollback 逻辑。</li></ul><p>所谓<code>TCC</code> 模式，是指支持把 <strong>自定义</strong> 的分支事务纳入到全局事务的管理中。</p><h4 id="saga模式" tabindex="-1"><a class="header-anchor" href="#saga模式" aria-hidden="true">#</a> <code>Saga</code>模式</h4><h5 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h5><p>Saga模式是<code>Seata</code> 提供的长事务解决方案，在Saga模式中，业务流程中每个参与者都提交本地事务，当出现某一个参与者失败则补偿前面已经成功的参与者，一阶段正向服务和二阶段补偿服务都由业务开发实现。</p><h5 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景" aria-hidden="true">#</a> 适用场景：</h5><ul><li>业务流程长、业务流程多</li><li>参与者包括其它公司或遗留系统服务，无法提供 <code>TCC</code> 模式要求的三个接口</li></ul><h5 id="优势" tabindex="-1"><a class="header-anchor" href="#优势" aria-hidden="true">#</a> 优势</h5><ul><li>一阶段提交本地事务，无锁，高性能</li><li>事件驱动架构，参与者可异步执行，高吞吐</li><li>补偿服务易于实现</li></ul><h5 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h5><ul><li>不保证隔离性</li></ul><h5 id="saga的实现" tabindex="-1"><a class="header-anchor" href="#saga的实现" aria-hidden="true">#</a> Saga的实现</h5><p>目前SEATA提供的Saga模式是基于状态机引擎来实现的，机制是：</p><ol><li><p>通过状态图来定义服务调用的流程并生成 json 状态语言定义文件</p></li><li><p>状态图中一个节点可以是调用一个服务，节点可以配置它的补偿节点</p></li><li><p>状态图 json 由状态机引擎驱动执行，当出现异常时状态引擎反向执行已成功节点对应的补偿节点将事务回滚</p><blockquote><p>注意: 异常发生时是否进行补偿也可由用户自定义决定</p></blockquote></li><li><p>可以实现服务编排需求，支持单项选择、并发、子流程、参数转换、参数映射、服务执行状态判断、异常捕获等功能</p></li></ol><h4 id="xa-模式" tabindex="-1"><a class="header-anchor" href="#xa-模式" aria-hidden="true">#</a> <code>XA</code> 模式</h4><h5 id="前提-1" tabindex="-1"><a class="header-anchor" href="#前提-1" aria-hidden="true">#</a> 前提</h5><ul><li>支持XA事务的数据库</li><li>Java 应用，通过 JDBC 访问数据库。</li></ul><h5 id="整体机制-1" tabindex="-1"><a class="header-anchor" href="#整体机制-1" aria-hidden="true">#</a> 整体机制</h5><p>在 Seata 定义的分布式事务框架内，利用事务资源（数据库，消息服务等）对XA协议的支持，以 XA协议的机制来管理分支事务的一种事务模式</p><p>执行阶段</p><ul><li>可回滚：业务 SQL 操作放在 XA 分支中进行，由资源对 XA 协议的支持来保证 <em>可回滚</em></li><li>持久化：XA 分支完成后，执行 XA prepare，同样，由资源对 XA 协议的支持来保证 <em>持久化</em>（即，之后任何意外都不会造成无法回滚的情况）</li></ul><p>完成阶段</p><ul><li>分支提交：执行 XA 分支的 commit</li><li>分支回滚：执行 XA 分支的 rollback</li></ul><h5 id="工作机制" tabindex="-1"><a class="header-anchor" href="#工作机制" aria-hidden="true">#</a> 工作机制</h5><ol><li><p>整体运行机制</p><p>XA 模式 运行在 Seata 定义的事务框架内：</p><p>执行阶段</p><ul><li>XA start/XA end/XA prepare + SQL + 注册分支</li></ul><p>完成阶段</p><ul><li>XA commit/XA rollback</li></ul></li><li><p>数据源代理XA 模式需要 XAConnection。</p><p>获取 XAConnection 两种方式：</p><ul><li>方式一：要求开发者配置 XADataSource</li><li>方式二：根据开发者的普通 DataSource 来创建</li></ul><p>第一种方式，给开发者增加了认知负担，需要为 XA 模式专门去学习和使用 XA 数据源，与 透明化 XA 编程模型的设计目标相违背。</p><p>第二种方式，对开发者比较友好，和 AT 模式使用一样，开发者完全不必关心 XA 层面的任何问题，保持本地编程模型即可。</p><p>我们优先设计实现第二种方式：数据源代理根据普通数据源中获取的普通 JDBC 连接创建出相应的 XAConnection。</p></li><li><p>分支注册</p><p>XA start 需要 Xid 参数。</p><p>这个 Xid 需要和 Seata 全局事务的 XID 和 BranchId 关联起来，以便由 TC 驱动 XA 分支的提交或回滚。</p><p>目前 Seata 的 BranchId 是在分支注册过程，由 TC 统一生成的，所以 XA 模式分支注册的时机需要在 XA start 之前。</p><p>将来一个可能的优化方向：</p><p>把分支注册尽量延后。类似 AT 模式在本地事务提交之前才注册分支，避免分支执行失败情况下，没有意义的分支注册。</p><p>这个优化方向需要 BranchId 生成机制的变化来配合。BranchId 不通过分支注册过程生成，而是生成后再带着 BranchId 去注册分支。</p></li></ol>',59),l=[t];function d(n,c){return e(),i("div",null,l)}const h=a(o,[["render",d],["__file","seata.html.vue"]]);export{h as default};
