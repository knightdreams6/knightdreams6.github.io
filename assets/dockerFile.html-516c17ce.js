import{_ as s,o as e,c as n,b as a}from"./app-c5e7af21.js";const t={},i=a(`<h4 id="what-s-dockerfile" tabindex="-1"><a class="header-anchor" href="#what-s-dockerfile" aria-hidden="true">#</a> What&#39;s Dockerfile?</h4><blockquote><p>DockerFile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明</p></blockquote><h4 id="from-和-run-指令的作用" tabindex="-1"><a class="header-anchor" href="#from-和-run-指令的作用" aria-hidden="true">#</a> FROM 和 RUN 指令的作用</h4><p><strong>FROM:</strong> 定制的镜像都是基于FROM的镜像</p><p><strong>RUN:</strong> 用于执行后面跟着的命令行命令。有以下两种格式</p><p>shell:</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">RUN</span> &lt;命令行命令&gt;</span>
<span class="token comment"># &lt;命令行命令&gt;等同于，在终端操作的shell命令。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>exec：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">RUN</span> [<span class="token string">&quot;可执行文件&quot;</span>, <span class="token string">&quot;参数1&quot;</span>, <span class="token string">&quot;参数2&quot;</span>]</span>
<span class="token comment"># 例如：</span>
<span class="token comment"># RUN [&quot;./test.php&quot;, &quot;dev&quot;, &quot;offline&quot;] 等价于 RUN ./test.php dev offline</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：Dockerfile的指令每执行一次都会在docker上新建一层。所以过多无意义的层，会造成镜像膨胀过大。如：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> centos</span>
<span class="token instruction"><span class="token keyword">RUN</span> yum install wget</span>
<span class="token instruction"><span class="token keyword">RUN</span> wget -O reids.tar.gz <span class="token string">&quot;http://download.redis.io/releases/redis-5.0.3.tar.gz&quot;</span></span>
<span class="token instruction"><span class="token keyword">RUN</span> tar -xvf redis.tar.gz</span>
<span class="token comment">## 以上会创建 3 层镜像。可简化为以下格式：</span>
<span class="token instruction"><span class="token keyword">FROM</span> centos</span>
<span class="token instruction"><span class="token keyword">RUN</span> yum install wget <span class="token operator">\\</span>
	&amp;&amp; wget -O redis.tar.gz <span class="token string">&quot;http://download.redis.io/releases/redis-5.0.3.tar.gz&quot;</span> <span class="token operator">\\</span>
	&amp;&amp; tar -xvf redis.tar.gz</span>
<span class="token comment">## 如上，以\`&amp;&amp;\`符号连接命令，这样执行就只会创建一层镜像</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="开始构建镜像" tabindex="-1"><a class="header-anchor" href="#开始构建镜像" aria-hidden="true">#</a> 开始构建镜像</h4><p>在 Dockerfile 文件的存放路径下，执行构建动作。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-t</span> 镜像名称:标签名称 <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注：最后<code>.</code>代表本次执行的上下文路径</p><p>上下文路径，是指 docker 在构建镜像，有时候想要用到本机的（比如复制），docker build 命令得知这个路径后，会将路径下的所有内容打包。</p><hr><h3 id="指令详解" tabindex="-1"><a class="header-anchor" href="#指令详解" aria-hidden="true">#</a> 指令详解</h3><h4 id="copy" tabindex="-1"><a class="header-anchor" href="#copy" aria-hidden="true">#</a> COPY</h4><blockquote><p>复制指令，从上下文目录中复制文件或者目录到容器里指定路径。</p></blockquote><p>格式：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">COPY</span> [--chown=&lt;user&gt;:&lt;group&gt;] &lt;源路径1&gt;...  &lt;目标路径&gt;</span>
<span class="token instruction"><span class="token keyword">COPY</span> [--chown=&lt;user&gt;:&lt;group&gt;] [<span class="token string">&quot;&lt;源路径1&gt;&quot;</span>,...  <span class="token string">&quot;&lt;目标路径&gt;&quot;</span>]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>[<code>--chown=&lt;user&gt;:&lt;group&gt;</code>]:</strong> 可选参数，用户改变复制到容器内文件的拥有者和所属组。</p><p><strong>&lt;源路径&gt;</strong>：源文件或者源目录，这里可以使用通配符表达式，其通配符规则要满足 Go 的 filepath.Match 规则。例如：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">COPY</span> hom* /mydir/</span>
<span class="token instruction"><span class="token keyword">COPY</span> hom?.txt /mydir/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>&lt;目标路径&gt;</strong>：容器内的指定路径，该路径不用事先建好，路径不存在的话，会自动创建。</p><h4 id="add" tabindex="-1"><a class="header-anchor" href="#add" aria-hidden="true">#</a> ADD</h4><blockquote><p>ADD指令和COPY指令使用格式一样（同样需求下，官方推荐使用COPY）</p></blockquote><ul><li><p>ADD的优点：在执行 &lt;源文件&gt; 为 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下，会自动复制并解压到 &lt;目标路径&gt;。</p></li><li><p>ADD 的缺点：在不解压的前提下，无法复制 tar 压缩文件。会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。具体是否使用，可以根据是否需要自动解压来决定。</p></li></ul><h4 id="cmd" tabindex="-1"><a class="header-anchor" href="#cmd" aria-hidden="true">#</a> CMD</h4><blockquote><p>类似于 RUN 指令，用于运行程序，但二者运行的时间点不同</p></blockquote><ul><li>CMD 在 docker run 时运行</li><li>RUN 是在 docker build</li></ul><p><strong>作用：</strong> 为启动的容器指定默认要运行的程序，程序运行结束，容器也就结束。CMD 指令指定的程序可被 docker run 命令行参数中指定要运行的程序所覆盖。</p><p><strong>注意：</strong> 如果 Dockerfile 中存在多个CMD指令，仅最后一个生效</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">CMD</span> &lt;shell 命令&gt; </span>
<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;&lt;可执行文件或命令&gt;&quot;</span>,<span class="token string">&quot;&lt;param1&gt;&quot;</span>,<span class="token string">&quot;&lt;param2&gt;&quot;</span>,...] </span>
<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;&lt;param1&gt;&quot;</span>,<span class="token string">&quot;&lt;param2&gt;&quot;</span>,...]  # 该写法是为 ENTRYPOINT 指令指定的程序提供默认参数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>推荐使用第二种格式，执行过程比较明确。第一种格式实际上在运行的过程中也会自动转换成第二种格式运行，并且默认可执行文件是 sh。</p><h4 id="entrypoint" tabindex="-1"><a class="header-anchor" href="#entrypoint" aria-hidden="true">#</a> ENTRYPOINT</h4><blockquote><p>类似于CMD命令，但其不会被 docker run 的命令行参数指定的指令所覆盖，而且这些命令行参数会被当做参数送给 ENTRYPOINT 指令指定的程序。</p><p>但是，如果运行 docker run 时使用了 --entrypoint选项，此选项的参数可当作要运行的程序覆盖 ENTRYPOINT 指令指定的程序。</p></blockquote><p><strong>优点：</strong> 在在执行 docker run 的时候可以指定 ENTRYPOINT 运行所需的参数。</p><p><strong>注意</strong>：如果 Dockerfile 中如果存在多个 ENTRYPOINT 指令，仅最后一个生效。</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">&quot;&lt;executeable&gt;&quot;</span>,<span class="token string">&quot;&lt;param1&gt;&quot;</span>,<span class="token string">&quot;&lt;param2&gt;&quot;</span>,...]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以搭配 CMD 命令使用：一般是变参才会使用 CMD ，这里的 CMD 等于是在给 ENTRYPOINT 传参，以下示例会提到。</p><p>示例：</p><p>假设已通过 Dockerfile 构建了 nginx:test 镜像：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> nginx</span>

<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">&quot;nginx&quot;</span>, <span class="token string">&quot;-c&quot;</span>] # 定参</span>
<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;/etc/nginx/nginx.conf&quot;</span>] # 变参 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1、不传参运行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run nginx:test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>容器内会默认运行以下命令，启动主进程。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>nginx <span class="token parameter variable">-c</span> /etc/nginx/nginx.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、传参运行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run nginx:test <span class="token parameter variable">-c</span> /etc/nginx/new.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="env" tabindex="-1"><a class="header-anchor" href="#env" aria-hidden="true">#</a> ENV</h4><blockquote><p>设置环境变量，定义了环境，那么在后续的指令中就可以使用这个变量</p></blockquote><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">ENV</span> &lt;key&gt; &lt;value&gt;</span>
<span class="token instruction"><span class="token keyword">ENV</span> &lt;key&gt;=&lt;value&gt; &lt;key2&gt;=&lt;value2&gt;...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>以下示例设置 NODE_VERSION = 7.2.0 ， 在后续的指令中可以通过 $NODE_VERSION 引用：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">ENV</span> NODE_VERSION 7.2.0</span>

<span class="token instruction"><span class="token keyword">RUN</span> curl -SLO <span class="token string">&quot;https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz&quot;</span> <span class="token operator">\\</span>
  &amp;&amp; curl -SLO <span class="token string">&quot;https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc&quot;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="arg" tabindex="-1"><a class="header-anchor" href="#arg" aria-hidden="true">#</a> ARG</h4><p>构建参数，与 ENV 作用一至。不过作用域不一样。ARG 设置的环境变量仅对 Dockerfile 内有效，也就是说只有 docker build 的过程中有效，构建好的镜像内不存在此环境变量。</p><p>构建命令 docker build 中可以用 --build-arg &lt;参数名&gt;=&lt;值&gt; 来覆盖。</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">ARG</span> &lt;参数名&gt;[=&lt;默认值&gt;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="vloume" tabindex="-1"><a class="header-anchor" href="#vloume" aria-hidden="true">#</a> VLOUME</h4><p>定义匿名数据卷。在启动容器时忘记挂载数据卷，会自动挂载到匿名卷。</p><p>作用：</p><ul><li>避免重要的数据，因容器重启而丢失</li><li>避免容器不断变大</li></ul><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">VOLUME</span> [<span class="token string">&quot;&lt;路径1&gt;&quot;</span>, <span class="token string">&quot;&lt;路径2&gt;&quot;</span>...]</span>
<span class="token instruction"><span class="token keyword">VOLUME</span> &lt;路径&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在启动容器 docker run 的时候，我们可以通过 -v 参数修改挂载点</p><h4 id="expose" tabindex="-1"><a class="header-anchor" href="#expose" aria-hidden="true">#</a> EXPOSE</h4><blockquote><p>仅仅是声明端口</p></blockquote><p>作用：</p><ul><li>帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射。</li><li>在运行时使用随机端口映射时，也就是 docker run -P时，会自动随机映射 EXPOSE 的端口</li></ul><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">EXPOSE</span> &lt;端口1&gt; [&lt;端口2&gt;...]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="workdir" tabindex="-1"><a class="header-anchor" href="#workdir" aria-hidden="true">#</a> WORKDIR</h4><p>指定工作目录。用 WORKDIR 指定的工作目录，会在构建镜像的每一层中都存在。（WORKDIR 指定的工作目录，必须是提前创建好的）。</p><p>docker build 构建镜像过程中的，每一个 RUN 命令都是新建的一层。只有通过 WORKDIR 创建的目录才会一直存在。</p><p>格式：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">WORKDIR</span> &lt;工作目录路径&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="user" tabindex="-1"><a class="header-anchor" href="#user" aria-hidden="true">#</a> USER</h4><p>用于指定执行后续命令的用户和用户组，这边只是切换后续命令执行的用户（用户和用户组必须提前已经存在）。</p><p>格式：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">USER</span> &lt;用户名&gt;[:&lt;用户组&gt;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="healthcheck" tabindex="-1"><a class="header-anchor" href="#healthcheck" aria-hidden="true">#</a> HEALTHCHECK</h4><p>用于指定某个程序或者指令来监控 docker 容器服务的运行状态。</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">HEALTHCHECK</span> [选项] CMD &lt;命令&gt;：设置检查容器健康状况的命令</span>
<span class="token instruction"><span class="token keyword">HEALTHCHECK</span> <span class="token keyword">NONE</span>：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令</span>

<span class="token instruction"><span class="token keyword">HEALTHCHECK</span> [选项] CMD &lt;命令&gt; : 这边 CMD 后面跟随的命令使用，可以参考 CMD 的用法。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="onbuild" tabindex="-1"><a class="header-anchor" href="#onbuild" aria-hidden="true">#</a> ONBUILD</h4><p>用于延迟构建命令的执行。</p><p>简单的说，就是 Dockerfile 里用 ONBUILD 指定的命令，在本次构建镜像的过程中不会执行（假设镜像为 test-build）。当有新的 Dockerfile 使用了之前构建的镜像 FROM test-build ，这是执行新镜像的 Dockerfile 构建时候，会执行 test-build 的 Dockerfile 里的 ONBUILD 指定的命令。</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">ONBUILD</span> &lt;其它指令&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,87),d=[i];function r(l,o){return e(),n("div",null,d)}const p=s(t,[["render",r],["__file","dockerFile.html.vue"]]);export{p as default};
